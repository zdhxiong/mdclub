{"version":3,"file":"mdclub-sdk.js","sources":["../node_modules/mdn-polyfills/MouseEvent.js","../node_modules/mdn-polyfills/CustomEvent.js","../node_modules/promise-polyfill/src/finally.js","../node_modules/promise-polyfill/src/index.js","../node_modules/promise-polyfill/src/polyfill.js","../src/defaults.ts","../node_modules/mdui.jq/es/utils.js","../node_modules/mdui.jq/es/functions/each.js","../node_modules/mdui.jq/es/JQ.js","../node_modules/mdui.jq/es/$.js","../node_modules/mdui.jq/es/methods/each.js","../node_modules/mdui.jq/es/functions/merge.js","../node_modules/mdui.jq/es/methods/get.js","../node_modules/mdui.jq/es/methods/find.js","../node_modules/mdui.jq/es/methods/utils/event.js","../node_modules/mdui.jq/es/methods/trigger.js","../node_modules/mdui.jq/es/functions/extend.js","../node_modules/mdui.jq/es/functions/param.js","../node_modules/mdui.jq/es/functions/utils/ajax.js","../node_modules/mdui.jq/es/functions/ajax.js","../src/util/requestMethod.ts","../src/adapter/abstract/Browser.ts","../src/adapter/BrowserAdapter.ts","../src/defaultsWithBrowserAdapter.ts","../src/errors.ts","../src/util/requestAlias.ts","../src/util/requestHandler.ts","../src/AnswerApi.ts","../src/ArticleApi.ts","../src/CaptchaApi.ts","../src/CommentApi.ts","../src/EmailApi.ts","../src/ImageApi.ts","../src/NotificationApi.ts","../src/OptionApi.ts","../src/QuestionApi.ts","../src/ReportApi.ts","../src/StatsApi.ts","../node_modules/sha-1/dist/sha1.esm.js","../src/TokenApi.ts","../src/TopicApi.ts","../src/UserApi.ts"],"sourcesContent":["!function(){try{return new MouseEvent(\"test\")}catch(e){}var e=function(e,t){t=t||{bubbles:!1,cancelable:!1};var n=document.createEvent(\"MouseEvent\");return n.initMouseEvent(e,t.bubbles,t.cancelable,window,0,t.screenX||0,t.screenY||0,t.clientX||0,t.clientY||0,t.ctrlKey||!1,t.altKey||!1,t.shiftKey||!1,t.metaKey||!1,t.button||0,t.relatedTarget||null),n};e.prototype=Event.prototype,window.MouseEvent=e}();\n","!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent(\"CustomEvent\");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}\"function\"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,window.CustomEvent=t)}();\n","/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        // @ts-ignore\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\nexport default finallyConstructor;\n","import promiseFinally from './finally';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction isArray(x) {\n  return Boolean(x && typeof x.length !== 'undefined');\n}\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = promiseFinally;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.all accepts an array'));\n    }\n\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.race accepts an array'));\n    }\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      Promise.resolve(arr[i]).then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  // @ts-ignore\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      // @ts-ignore\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nexport default Promise;\n","import Promise from './index';\nimport promiseFinally from './finally';\n\n/** @suppress {undefinedVars} */\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!('Promise' in globalNS)) {\n  globalNS['Promise'] = Promise;\n} else if (!globalNS.Promise.prototype['finally']) {\n  globalNS.Promise.prototype['finally'] = promiseFinally;\n}\n","import {\n  BeforeSendCallback,\n  SuccessCallback,\n  ErrorCallback,\n  CompleteCallback,\n  RequestAdapterInterface,\n} from './util/misc';\n\n/**\n * SDK 全局配置参数\n */\ninterface DefaultsInterface {\n  // API 地址\n  apiPath?: string;\n\n  // 是否进行请求方法重写，若为true，则把 patch, put 请求重写成 post，把 delete 请求重写成 get\n  methodOverride?: boolean;\n\n  // 请求超时时间\n  timeout?: number;\n\n  // 适配器实例\n  adapter?: RequestAdapterInterface;\n\n  // 开始发送请求前的回调函数，返回 false 可取消请求\n  beforeSend?: BeforeSendCallback;\n\n  // 请求成功的回调函数\n  success?: SuccessCallback;\n\n  // 请求失败的回调函数\n  error?: ErrorCallback;\n\n  // 请求完成的回调函数\n  complete?: CompleteCallback;\n}\n\nconst defaults: DefaultsInterface = {\n  apiPath: '/api',\n  methodOverride: false,\n  timeout: 30000,\n};\n\nexport default defaults;\n","function isNodeName(element, name) {\n    return element.nodeName.toLowerCase() === name.toLowerCase();\n}\nfunction isFunction(target) {\n    return typeof target === 'function';\n}\nfunction isString(target) {\n    return typeof target === 'string';\n}\nfunction isNumber(target) {\n    return typeof target === 'number';\n}\nfunction isBoolean(target) {\n    return typeof target === 'boolean';\n}\nfunction isUndefined(target) {\n    return typeof target === 'undefined';\n}\nfunction isNull(target) {\n    return target === null;\n}\nfunction isWindow(target) {\n    return target instanceof Window;\n}\nfunction isDocument(target) {\n    return target instanceof Document;\n}\nfunction isElement(target) {\n    return target instanceof Element;\n}\nfunction isNode(target) {\n    return target instanceof Node;\n}\n/**\n * 是否是 IE 浏览器\n */\nfunction isIE() {\n    // @ts-ignore\n    return !!window.document.documentMode;\n}\nfunction isArrayLike(target) {\n    if (isFunction(target) || isWindow(target)) {\n        return false;\n    }\n    return isNumber(target.length);\n}\nfunction isObjectLike(target) {\n    return typeof target === 'object' && target !== null;\n}\nfunction toElement(target) {\n    return isDocument(target) ? target.documentElement : target;\n}\n/**\n * 把用 - 分隔的字符串转为驼峰（如 box-sizing 转换为 boxSizing）\n * @param string\n */\nfunction toCamelCase(string) {\n    return string\n        .replace(/^-ms-/, 'ms-')\n        .replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());\n}\n/**\n * 把驼峰法转为用 - 分隔的字符串（如 boxSizing 转换为 box-sizing）\n * @param string\n */\nfunction toKebabCase(string) {\n    return string.replace(/[A-Z]/g, (replacer) => '-' + replacer.toLowerCase());\n}\n/**\n * 获取元素的样式值\n * @param element\n * @param name\n */\nfunction getComputedStyleValue(element, name) {\n    return window.getComputedStyle(element).getPropertyValue(toKebabCase(name));\n}\n/**\n * 检查元素的 box-sizing 是否是 border-box\n * @param element\n */\nfunction isBorderBox(element) {\n    return getComputedStyleValue(element, 'box-sizing') === 'border-box';\n}\n/**\n * 获取元素的 padding, border, margin 宽度（两侧宽度的和，单位为px）\n * @param element\n * @param direction\n * @param extra\n */\nfunction getExtraWidth(element, direction, extra) {\n    const position = direction === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];\n    return [0, 1].reduce((prev, _, index) => {\n        let prop = extra + position[index];\n        if (extra === 'border') {\n            prop += 'Width';\n        }\n        return prev + parseFloat(getComputedStyleValue(element, prop) || '0');\n    }, 0);\n}\n/**\n * 获取元素的样式值，对 width 和 height 进行过处理\n * @param element\n * @param name\n */\nfunction getStyle(element, name) {\n    // width、height 属性使用 getComputedStyle 得到的值不准确，需要使用 getBoundingClientRect 获取\n    if (name === 'width' || name === 'height') {\n        const valueNumber = element.getBoundingClientRect()[name];\n        if (isBorderBox(element)) {\n            return `${valueNumber}px`;\n        }\n        return `${valueNumber -\n            getExtraWidth(element, name, 'border') -\n            getExtraWidth(element, name, 'padding')}px`;\n    }\n    return getComputedStyleValue(element, name);\n}\n/**\n * 获取子节点组成的数组\n * @param target\n * @param parent\n */\nfunction getChildNodesArray(target, parent) {\n    const tempParent = document.createElement(parent);\n    tempParent.innerHTML = target;\n    return [].slice.call(tempParent.childNodes);\n}\n/**\n * 始终返回 false 的函数\n */\nfunction returnFalse() {\n    return false;\n}\n/**\n * 数值单位的 CSS 属性\n */\nconst cssNumber = [\n    'animationIterationCount',\n    'columnCount',\n    'fillOpacity',\n    'flexGrow',\n    'flexShrink',\n    'fontWeight',\n    'gridArea',\n    'gridColumn',\n    'gridColumnEnd',\n    'gridColumnStart',\n    'gridRow',\n    'gridRowEnd',\n    'gridRowStart',\n    'lineHeight',\n    'opacity',\n    'order',\n    'orphans',\n    'widows',\n    'zIndex',\n    'zoom',\n];\nexport { isNodeName, isArrayLike, isObjectLike, isFunction, isString, isNumber, isBoolean, isUndefined, isNull, isWindow, isDocument, isElement, isNode, isIE, toElement, toCamelCase, toKebabCase, getComputedStyleValue, isBorderBox, getExtraWidth, getStyle, getChildNodesArray, returnFalse, cssNumber, };\n","import { isArrayLike } from '../utils';\nfunction each(target, callback) {\n    if (isArrayLike(target)) {\n        for (let i = 0; i < target.length; i += 1) {\n            if (callback.call(target[i], i, target[i]) === false) {\n                return target;\n            }\n        }\n    }\n    else {\n        const keys = Object.keys(target);\n        for (let i = 0; i < keys.length; i += 1) {\n            if (callback.call(target[keys[i]], keys[i], target[keys[i]]) === false) {\n                return target;\n            }\n        }\n    }\n    return target;\n}\nexport default each;\n","import each from './functions/each';\n/**\n * 为了使用模块扩充，这里不能使用默认导出\n */\nexport class JQ {\n    constructor(arr) {\n        this.length = 0;\n        if (!arr) {\n            return this;\n        }\n        each(arr, (i, item) => {\n            // @ts-ignore\n            this[i] = item;\n        });\n        this.length = arr.length;\n        return this;\n    }\n}\n","import each from './functions/each';\nimport { JQ } from './JQ';\nimport { getChildNodesArray, isArrayLike, isFunction, isNode, isString, } from './utils';\nfunction get$() {\n    const $ = function (selector) {\n        if (!selector) {\n            return new JQ();\n        }\n        // JQ\n        if (selector instanceof JQ) {\n            return selector;\n        }\n        // function\n        if (isFunction(selector)) {\n            if (/complete|loaded|interactive/.test(document.readyState) &&\n                document.body) {\n                selector.call(document, $);\n            }\n            else {\n                document.addEventListener('DOMContentLoaded', () => selector.call(document, $), false);\n            }\n            return new JQ([document]);\n        }\n        // String\n        if (isString(selector)) {\n            const html = selector.trim();\n            // 根据 HTML 字符串创建 JQ 对象\n            if (html[0] === '<' && html[html.length - 1] === '>') {\n                let toCreate = 'div';\n                const tags = {\n                    li: 'ul',\n                    tr: 'tbody',\n                    td: 'tr',\n                    th: 'tr',\n                    tbody: 'table',\n                    option: 'select',\n                };\n                each(tags, (childTag, parentTag) => {\n                    if (html.indexOf(`<${childTag}`) === 0) {\n                        toCreate = parentTag;\n                        return false;\n                    }\n                    return;\n                });\n                return new JQ(getChildNodesArray(html, toCreate));\n            }\n            // 根据 CSS 选择器创建 JQ 对象\n            const isIdSelector = selector[0] === '#' && !selector.match(/[ .<>:~]/);\n            if (!isIdSelector) {\n                return new JQ(document.querySelectorAll(selector));\n            }\n            const element = document.getElementById(selector.slice(1));\n            if (element) {\n                return new JQ([element]);\n            }\n            return new JQ();\n        }\n        if (isArrayLike(selector) && !isNode(selector)) {\n            return new JQ(selector);\n        }\n        return new JQ([selector]);\n    };\n    $.fn = JQ.prototype;\n    return $;\n}\nconst $ = get$();\nexport default $;\n","import $ from '../$';\nimport each from '../functions/each';\n$.fn.each = function (callback) {\n    return each(this, callback);\n};\n","import each from './each';\n/**\n * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n * @param first 第一个数组\n * @param second 该数组的元素将被追加到第一个数组中\n * @example\n```js\nmerge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n */\nfunction merge(first, second) {\n    each(second, (_, value) => {\n        first.push(value);\n    });\n    return first;\n}\nexport default merge;\n","import $ from '../$';\n$.fn.get = function (index) {\n    return index === undefined\n        ? [].slice.call(this)\n        : this[index >= 0 ? index : index + this.length];\n};\n","import $ from '../$';\nimport merge from '../functions/merge';\nimport { JQ } from '../JQ';\nimport './each';\nimport './get';\n$.fn.find = function (selector) {\n    const foundElements = [];\n    this.each((_, element) => {\n        merge(foundElements, $(element.querySelectorAll(selector)).get());\n    });\n    return new JQ(foundElements);\n};\n","import $ from '../../$';\nimport contains from '../../functions/contains';\nimport { isObjectLike } from '../../utils';\nimport '../find';\n// 存储事件\nconst handlers = {};\n// 元素ID\nlet mduiElementId = 1;\n/**\n * 为元素赋予一个唯一的ID\n */\nfunction getElementId(element) {\n    const key = '_mduiEventId';\n    // @ts-ignore\n    if (!element[key]) {\n        // @ts-ignore\n        element[key] = ++mduiElementId;\n    }\n    // @ts-ignore\n    return element[key];\n}\n/**\n * 解析事件名中的命名空间\n */\nfunction parse(type) {\n    const parts = type.split('.');\n    return {\n        type: parts[0],\n        ns: parts.slice(1).sort().join(' '),\n    };\n}\n/**\n * 命名空间匹配规则\n */\nfunction matcherFor(ns) {\n    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');\n}\n/**\n * 获取匹配的事件\n * @param element\n * @param type\n * @param func\n * @param selector\n */\nfunction getHandlers(element, type, func, selector) {\n    const event = parse(type);\n    return (handlers[getElementId(element)] || []).filter((handler) => handler &&\n        (!event.type || handler.type === event.type) &&\n        (!event.ns || matcherFor(event.ns).test(handler.ns)) &&\n        (!func || getElementId(handler.func) === getElementId(func)) &&\n        (!selector || handler.selector === selector));\n}\n/**\n * 添加事件监听\n * @param element\n * @param types\n * @param func\n * @param data\n * @param selector\n */\nfunction add(element, types, func, data, selector) {\n    const elementId = getElementId(element);\n    if (!handlers[elementId]) {\n        handlers[elementId] = [];\n    }\n    // 传入 data.useCapture 来设置 useCapture: true\n    let useCapture = false;\n    if (isObjectLike(data) && data.useCapture) {\n        useCapture = true;\n    }\n    types.split(' ').forEach((type) => {\n        if (!type) {\n            return;\n        }\n        const event = parse(type);\n        function callFn(e, elem) {\n            // 因为鼠标事件模拟事件的 detail 属性是只读的，因此在 e._detail 中存储参数\n            const result = func.apply(elem, \n            // @ts-ignore\n            e._detail === undefined ? [e] : [e].concat(e._detail));\n            if (result === false) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }\n        function proxyFn(e) {\n            // @ts-ignore\n            if (e._ns && !matcherFor(e._ns).test(event.ns)) {\n                return;\n            }\n            // @ts-ignore\n            e._data = data;\n            if (selector) {\n                // 事件代理\n                $(element)\n                    .find(selector)\n                    .get()\n                    .reverse()\n                    .forEach((elem) => {\n                    if (elem === e.target ||\n                        contains(elem, e.target)) {\n                        callFn(e, elem);\n                    }\n                });\n            }\n            else {\n                // 不使用事件代理\n                callFn(e, element);\n            }\n        }\n        const handler = {\n            type: event.type,\n            ns: event.ns,\n            func,\n            selector,\n            id: handlers[elementId].length,\n            proxy: proxyFn,\n        };\n        handlers[elementId].push(handler);\n        element.addEventListener(handler.type, proxyFn, useCapture);\n    });\n}\n/**\n * 移除事件监听\n * @param element\n * @param types\n * @param func\n * @param selector\n */\nfunction remove(element, types, func, selector) {\n    const handlersInElement = handlers[getElementId(element)] || [];\n    const removeEvent = (handler) => {\n        delete handlersInElement[handler.id];\n        element.removeEventListener(handler.type, handler.proxy, false);\n    };\n    if (!types) {\n        handlersInElement.forEach((handler) => removeEvent(handler));\n    }\n    else {\n        types.split(' ').forEach((type) => {\n            if (type) {\n                getHandlers(element, type, func, selector).forEach((handler) => removeEvent(handler));\n            }\n        });\n    }\n}\nexport { parse, add, remove };\n","import $ from '../$';\nimport './each';\nimport { parse } from './utils/event';\n$.fn.trigger = function (type, extraParameters) {\n    const event = parse(type);\n    let eventObject;\n    const eventParams = {\n        bubbles: true,\n        cancelable: true,\n    };\n    const isMouseEvent = ['click', 'mousedown', 'mouseup', 'mousemove'].indexOf(event.type) > -1;\n    if (isMouseEvent) {\n        // Note: MouseEvent 无法传入 detail 参数\n        eventObject = new MouseEvent(event.type, eventParams);\n    }\n    else {\n        eventParams.detail = extraParameters;\n        eventObject = new CustomEvent(event.type, eventParams);\n    }\n    // @ts-ignore\n    eventObject._detail = extraParameters;\n    // @ts-ignore\n    eventObject._ns = event.ns;\n    return this.each(function () {\n        this.dispatchEvent(eventObject);\n    });\n};\n","import each from '../functions/each';\nimport { isUndefined } from '../utils';\nfunction extend(target, object1, ...objectN) {\n    objectN.unshift(object1);\n    each(objectN, (_, object) => {\n        each(object, (prop, value) => {\n            if (!isUndefined(value)) {\n                target[prop] = value;\n            }\n        });\n    });\n    return target;\n}\nexport default extend;\n","import { isObjectLike } from '../utils';\nimport each from './each';\n/**\n * 将数组或对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n *\n * 若传入数组，则格式必须和 serializeArray 方法的返回值一样\n * @param obj 对象或数组\n * @example\n```js\nparam({ width: 1680, height: 1050 });\n// width=1680&height=1050\n```\n * @example\n```js\nparam({ foo: { one: 1, two: 2 }})\n// foo[one]=1&foo[two]=2\n```\n * @example\n```js\nparam({ids: [1, 2, 3]})\n// ids[]=1&ids[]=2&ids[]=3\n```\n * @example\n```js\nparam([\n  {\"name\":\"name\",\"value\":\"mdui\"},\n  {\"name\":\"password\",\"value\":\"123456\"}\n])\n// name=mdui&password=123456\n```\n */\nfunction param(obj) {\n    if (!isObjectLike(obj) && !Array.isArray(obj)) {\n        return '';\n    }\n    const args = [];\n    function destructure(key, value) {\n        let keyTmp;\n        if (isObjectLike(value)) {\n            each(value, (i, v) => {\n                if (Array.isArray(value) && !isObjectLike(v)) {\n                    keyTmp = '';\n                }\n                else {\n                    keyTmp = i;\n                }\n                destructure(`${key}[${keyTmp}]`, v);\n            });\n        }\n        else {\n            if (value == null || value === '') {\n                keyTmp = '=';\n            }\n            else {\n                keyTmp = `=${encodeURIComponent(value)}`;\n            }\n            args.push(encodeURIComponent(key) + keyTmp);\n        }\n    }\n    if (Array.isArray(obj)) {\n        each(obj, function () {\n            destructure(this.name, this.value);\n        });\n    }\n    else {\n        each(obj, destructure);\n    }\n    return args.join('&');\n}\nexport default param;\n","// 全局配置参数\nconst globalOptions = {};\n// 全局事件名\nconst ajaxEvents = {\n    ajaxStart: 'start.mdui.ajax',\n    ajaxSuccess: 'success.mdui.ajax',\n    ajaxError: 'error.mdui.ajax',\n    ajaxComplete: 'complete.mdui.ajax',\n};\nexport { globalOptions, ajaxEvents };\n","import $ from '../$';\nimport '../methods/trigger';\nimport { isString, isUndefined } from '../utils';\nimport each from './each';\nimport extend from './extend';\nimport param from './param';\nimport { ajaxEvents, globalOptions } from './utils/ajax';\n/**\n * 判断此请求方法是否通过查询字符串提交参数\n * @param method 请求方法，大写\n */\nfunction isQueryStringData(method) {\n    return ['GET', 'HEAD'].indexOf(method) >= 0;\n}\n/**\n * 添加参数到 URL 上，且 URL 中不存在 ? 时，自动把第一个 & 替换为 ?\n * @param url\n * @param query\n */\nfunction appendQuery(url, query) {\n    return `${url}&${query}`.replace(/[&?]{1,2}/, '?');\n}\n/**\n * 合并请求参数，参数优先级：options > globalOptions > defaults\n * @param options\n */\nfunction mergeOptions(options) {\n    // 默认参数\n    const defaults = {\n        url: '',\n        method: 'GET',\n        data: '',\n        processData: true,\n        async: true,\n        cache: true,\n        username: '',\n        password: '',\n        headers: {},\n        xhrFields: {},\n        statusCode: {},\n        dataType: 'text',\n        contentType: 'application/x-www-form-urlencoded',\n        timeout: 0,\n        global: true,\n    };\n    // globalOptions 中的回调函数不合并\n    each(globalOptions, (key, value) => {\n        const callbacks = [\n            'beforeSend',\n            'success',\n            'error',\n            'complete',\n            'statusCode',\n        ];\n        // @ts-ignore\n        if (callbacks.indexOf(key) < 0 && !isUndefined(value)) {\n            defaults[key] = value;\n        }\n    });\n    return extend({}, defaults, options);\n}\n/**\n * 发送 ajax 请求\n * @param options\n * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n */\nfunction ajax(options) {\n    // 是否已取消请求\n    let isCanceled = false;\n    // 事件参数\n    const eventParams = {};\n    // 参数合并\n    const mergedOptions = mergeOptions(options);\n    let url = mergedOptions.url || window.location.toString();\n    const method = mergedOptions.method.toUpperCase();\n    let data = mergedOptions.data;\n    const processData = mergedOptions.processData;\n    const async = mergedOptions.async;\n    const cache = mergedOptions.cache;\n    const username = mergedOptions.username;\n    const password = mergedOptions.password;\n    const headers = mergedOptions.headers;\n    const xhrFields = mergedOptions.xhrFields;\n    const statusCode = mergedOptions.statusCode;\n    const dataType = mergedOptions.dataType;\n    const contentType = mergedOptions.contentType;\n    const timeout = mergedOptions.timeout;\n    const global = mergedOptions.global;\n    // 需要发送的数据\n    // GET/HEAD 请求和 processData 为 true 时，转换为查询字符串格式，特殊格式不转换\n    if (data &&\n        (isQueryStringData(method) || processData) &&\n        !isString(data) &&\n        !(data instanceof ArrayBuffer) &&\n        !(data instanceof Blob) &&\n        !(data instanceof Document) &&\n        !(data instanceof FormData)) {\n        data = param(data);\n    }\n    // 对于 GET、HEAD 类型的请求，把 data 数据添加到 URL 中\n    if (data && isQueryStringData(method)) {\n        // 查询字符串拼接到 URL 中\n        url = appendQuery(url, data);\n        data = null;\n    }\n    /**\n     * 触发事件和回调函数\n     * @param event\n     * @param params\n     * @param callback\n     * @param args\n     */\n    function trigger(event, params, callback, ...args) {\n        // 触发全局事件\n        if (global) {\n            $(document).trigger(event, params);\n        }\n        // 触发 ajax 回调和事件\n        let result1;\n        let result2;\n        if (callback) {\n            // 全局回调\n            if (callback in globalOptions) {\n                // @ts-ignore\n                result1 = globalOptions[callback](...args);\n            }\n            // 自定义回调\n            if (mergedOptions[callback]) {\n                // @ts-ignore\n                result2 = mergedOptions[callback](...args);\n            }\n            // beforeSend 回调返回 false 时取消 ajax 请求\n            if (callback === 'beforeSend' &&\n                (result1 === false || result2 === false)) {\n                isCanceled = true;\n            }\n        }\n    }\n    // XMLHttpRequest 请求\n    function XHR() {\n        let textStatus;\n        return new Promise((resolve, reject) => {\n            // GET/HEAD 请求的缓存处理\n            if (isQueryStringData(method) && !cache) {\n                url = appendQuery(url, `_=${Date.now()}`);\n            }\n            // 创建 XHR\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, url, async, username, password);\n            if (contentType ||\n                (data && !isQueryStringData(method) && contentType !== false)) {\n                xhr.setRequestHeader('Content-Type', contentType);\n            }\n            // 设置 Accept\n            if (dataType === 'json') {\n                xhr.setRequestHeader('Accept', 'application/json, text/javascript');\n            }\n            // 添加 headers\n            if (headers) {\n                each(headers, (key, value) => {\n                    // undefined 值不发送，string 和 null 需要发送\n                    if (!isUndefined(value)) {\n                        xhr.setRequestHeader(key, value + ''); // 把 null 转换成字符串\n                    }\n                });\n            }\n            // 检查是否是跨域请求，跨域请求时不添加 X-Requested-With\n            const crossDomain = /^([\\w-]+:)?\\/\\/([^/]+)/.test(url) &&\n                RegExp.$2 !== window.location.host;\n            if (!crossDomain) {\n                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n            }\n            if (xhrFields) {\n                each(xhrFields, (key, value) => {\n                    // @ts-ignore\n                    xhr[key] = value;\n                });\n            }\n            eventParams.xhr = xhr;\n            eventParams.options = mergedOptions;\n            let xhrTimeout;\n            xhr.onload = function () {\n                if (xhrTimeout) {\n                    clearTimeout(xhrTimeout);\n                }\n                // AJAX 返回的 HTTP 响应码是否表示成功\n                const isHttpStatusSuccess = (xhr.status >= 200 && xhr.status < 300) ||\n                    xhr.status === 304 ||\n                    xhr.status === 0;\n                let responseData;\n                if (isHttpStatusSuccess) {\n                    if (xhr.status === 204 || method === 'HEAD') {\n                        textStatus = 'nocontent';\n                    }\n                    else if (xhr.status === 304) {\n                        textStatus = 'notmodified';\n                    }\n                    else {\n                        textStatus = 'success';\n                    }\n                    if (dataType === 'json') {\n                        try {\n                            responseData =\n                                method === 'HEAD' ? undefined : JSON.parse(xhr.responseText);\n                            eventParams.data = responseData;\n                        }\n                        catch (err) {\n                            textStatus = 'parsererror';\n                            trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, textStatus);\n                            reject(new Error(textStatus));\n                        }\n                        if (textStatus !== 'parsererror') {\n                            trigger(ajaxEvents.ajaxSuccess, eventParams, 'success', responseData, textStatus, xhr);\n                            resolve(responseData);\n                        }\n                    }\n                    else {\n                        responseData =\n                            method === 'HEAD'\n                                ? undefined\n                                : xhr.responseType === 'text' || xhr.responseType === ''\n                                    ? xhr.responseText\n                                    : xhr.response;\n                        eventParams.data = responseData;\n                        trigger(ajaxEvents.ajaxSuccess, eventParams, 'success', responseData, textStatus, xhr);\n                        resolve(responseData);\n                    }\n                }\n                else {\n                    textStatus = 'error';\n                    trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, textStatus);\n                    reject(new Error(textStatus));\n                }\n                // statusCode\n                each([globalOptions.statusCode, statusCode], (_, func) => {\n                    if (func && func[xhr.status]) {\n                        if (isHttpStatusSuccess) {\n                            func[xhr.status](responseData, textStatus, xhr);\n                        }\n                        else {\n                            func[xhr.status](xhr, textStatus);\n                        }\n                    }\n                });\n                trigger(ajaxEvents.ajaxComplete, eventParams, 'complete', xhr, textStatus);\n            };\n            xhr.onerror = function () {\n                if (xhrTimeout) {\n                    clearTimeout(xhrTimeout);\n                }\n                trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, xhr.statusText);\n                trigger(ajaxEvents.ajaxComplete, eventParams, 'complete', xhr, 'error');\n                reject(new Error(xhr.statusText));\n            };\n            xhr.onabort = function () {\n                let statusText = 'abort';\n                if (xhrTimeout) {\n                    statusText = 'timeout';\n                    clearTimeout(xhrTimeout);\n                }\n                trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, statusText);\n                trigger(ajaxEvents.ajaxComplete, eventParams, 'complete', xhr, statusText);\n                reject(new Error(statusText));\n            };\n            // ajax start 回调\n            trigger(ajaxEvents.ajaxStart, eventParams, 'beforeSend', xhr);\n            if (isCanceled) {\n                reject(new Error('cancel'));\n                return;\n            }\n            // Timeout\n            if (timeout > 0) {\n                xhrTimeout = setTimeout(() => {\n                    xhr.abort();\n                }, timeout);\n            }\n            // 发送 XHR\n            xhr.send(data);\n        });\n    }\n    return XHR();\n}\nexport default ajax;\n","type METHOD_TYPE = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\nconst GET = 'GET';\nconst POST = 'POST';\nconst PUT = 'PUT';\nconst PATCH = 'PATCH';\nconst DELETE = 'DELETE';\n\nexport { METHOD_TYPE, GET, POST, PUT, PATCH, DELETE };\n","export default abstract class {\n  /**\n   * 获取数据存储\n   * @param key\n   */\n  getStorage(key: string): string | null {\n    return window.localStorage.getItem(key);\n  }\n\n  /**\n   * 设置数据存储\n   * @param key\n   * @param data\n   */\n  setStorage(key: string, data: string): void {\n    window.localStorage.setItem(key, data);\n  }\n\n  /**\n   * 删除数据存储\n   * @param key\n   */\n  removeStorage(key: string): void {\n    window.localStorage.removeItem(key);\n  }\n}\n","import ajax from 'mdui.jq/es/functions/ajax';\nimport extend from 'mdui.jq/es/functions/extend';\nimport globalOptions from '../defaults';\nimport {\n  RequestAdapterInterface,\n  RequestOptionsInterface,\n  ResponseInterface,\n} from '../util/misc';\nimport { GET } from '../util/requestMethod';\nimport BrowserAbstract from './abstract/Browser';\nimport PlainObject from 'mdui.jq/es/interfaces/PlainObject';\n\n/**\n * 浏览器适配器，使用 mdui.jq 中的 ajax 函数实现\n */\nexport default class extends BrowserAbstract\n  implements RequestAdapterInterface {\n  request(options: RequestOptionsInterface): Promise<ResponseInterface> {\n    const isFormData = options.data instanceof FormData;\n    let headers: PlainObject = {\n      token: this.getStorage('token') || undefined,\n    };\n\n    if (options.headers) {\n      headers = extend({}, headers, options.headers);\n    }\n\n    return new Promise((resolve, reject): void => {\n      ajax({\n        method: options.method || GET,\n        url: `${globalOptions.apiPath}${options.url || ''}`,\n        data: isFormData ? options.data : JSON.stringify(options.data),\n        headers,\n        dataType: 'json',\n        contentType: isFormData ? false : 'application/json',\n        timeout: globalOptions.timeout,\n        global: false,\n        beforeSend: () => {\n          globalOptions.beforeSend && globalOptions.beforeSend();\n        },\n        success: (data) => {\n          globalOptions.success && globalOptions.success(data);\n          data.code === 0 ? resolve(data) : reject(data);\n        },\n        error: (_, textStatus) => {\n          globalOptions.error && globalOptions.error(textStatus);\n          reject({\n            code: 999999,\n            message: textStatus,\n          });\n        },\n        complete: () => {\n          globalOptions.complete && globalOptions.complete();\n        },\n      });\n    });\n  }\n}\n","import defaults from './defaults';\nimport BrowserAdapter from './adapter/BrowserAdapter';\n\ndefaults.adapter = new BrowserAdapter();\n\nexport default defaults;\n","/**\n * 错误代码\n *\n * 错误码格式：A-BB-CCC\n * A：错误级别，1：系统级错误；2：服务级错误\n * B：模块编号\n * C：具体错误编号\n */\n/**\n * 系统级错误\n */\nexport const SYSTEM_ERROR = 100000;\nexport const SYSTEM_MAINTAIN = 100001;\nexport const SYSTEM_IP_LIMIT = 100002;\nexport const SYSTEM_USER_LIMIT = 100003;\nexport const SYSTEM_API_NOT_FOUND = 100004;\nexport const SYSTEM_API_NOT_ALLOWED = 100005;\nexport const SYSTEM_REQUEST_JSON_INVALID = 100006;\n\n/**\n * 通用服务错误，模块编号：0\n */\nexport const COMMON_FIELD_VERIFY_FAILED = 200001;\nexport const COMMON_SEND_EMAIL_FAILED = 200002;\nexport const COMMON_EMAIL_VERIFY_EXPIRED = 200003;\nexport const COMMON_IMAGE_UPLOAD_FAILED = 200004;\nexport const COMMON_IMAGE_NOT_FOUND = 200005;\nexport const COMMON_VOTE_TYPE_ERROR = 200006;\n\n/**\n * 用户相关错误，模块编号：1\n */\nexport const USER_NEED_LOGIN = 201001;\nexport const USER_NEED_MANAGE_PERMISSION = 201002;\nexport const USER_NOT_FOUND = 201003;\nexport const USER_TARGET_NOT_FOUND = 201004;\nexport const USER_DISABLED = 201005;\nexport const USER_PASSWORD_ERROR = 201006;\nexport const USER_AVATAR_UPLOAD_FAILED = 201007;\nexport const USER_COVER_UPLOAD_FAILED = 201008;\nexport const USER_CANT_FOLLOW_YOURSELF = 201009;\n\n/**\n * 提问相关错误，模块编号：2\n */\nexport const QUESTION_NOT_FOUND = 202001;\n\nexport const QUESTION_CANT_EDIT = 202002;\nexport const QUESTION_CANT_EDIT_NOT_AUTHOR = 202003;\nexport const QUESTION_CANT_EDIT_TIMEOUT = 202004;\nexport const QUESTION_CANT_EDIT_HAS_ANSWER = 202005;\nexport const QUESTION_CANT_EDIT_HAS_COMMENT = 202006;\n\nexport const QUESTION_CANT_DELETE = 202007;\nexport const QUESTION_CANT_DELETE_NOT_AUTHOR = 202008;\nexport const QUESTION_CANT_DELETE_TIMEOUT = 202009;\nexport const QUESTION_CANT_DELETE_HAS_ANSWER = 202010;\nexport const QUESTION_CANT_DELETE_HAS_COMMENT = 202011;\n\n/**\n * 回答相关错误，模块编号：3\n */\nexport const ANSWER_NOT_FOUND = 203001;\n\nexport const ANSWER_CANT_EDIT = 203002;\nexport const ANSWER_CANT_EDIT_NOT_AUTHOR = 203003;\nexport const ANSWER_CANT_EDIT_TIMEOUT = 203004;\nexport const ANSWER_CANT_EDIT_HAS_COMMENT = 203005;\n\nexport const ANSWER_CANT_DELETE = 203006;\nexport const ANSWER_CANT_DELETE_NOT_AUTHOR = 203007;\nexport const ANSWER_CANT_DELETE_TIMEOUT = 203008;\nexport const ANSWER_CANT_DELETE_HAS_COMMENT = 203009;\n\n/**\n * 评论相关错误，模块编号：4\n */\nexport const COMMENT_NOT_FOUND = 204001;\n\nexport const COMMENT_CANT_EDIT = 204002;\nexport const COMMENT_CANT_EDIT_NOT_AUTHOR = 204003;\nexport const COMMENT_CANT_EDIT_TIMEOUT = 204004;\n\nexport const COMMENT_CANT_DELETE = 204005;\nexport const COMMENT_CANT_DELETE_NOT_AUTHOR = 204006;\nexport const COMMENT_CANT_DELETE_TIMEOUT = 204007;\n\n/**\n * 话题相关错误，模块编号：5\n */\nexport const TOPIC_NOT_FOUND = 205001;\nexport const TOPIC_COVER_UPLOAD_FAILED = 205002;\n\n/**\n * 文章相关错误，模块编号：6\n */\nexport const ARTICLE_NOT_FOUND = 206001;\n\nexport const ARTICLE_CANT_EDIT_NOT_AUTHOR = 206002;\nexport const ARTICLE_CANT_EDIT = 206003;\nexport const ARTICLE_CANT_EDIT_TIMEOUT = 206004;\nexport const ARTICLE_CANT_EDIT_HAS_COMMENT = 206005;\n\nexport const ARTICLE_CANT_DELETE_NOT_AUTHOR = 206006;\nexport const ARTICLE_CANT_DELETE = 206007;\nexport const ARTICLE_CANT_DELETE_TIMEOUT = 206008;\nexport const ARTICLE_CANT_DELETE_HAS_COMMENT = 206009;\n\n/**\n * 举报相关错误，模块编号：7\n */\nexport const REPORT_NOT_FOUND = 207001;\nexport const REPORT_TARGET_NOT_FOUND = 207002;\nexport const REPORT_ALREADY_SUBMITTED = 207003;\n","import defaults from '../defaults';\nimport { ResponseInterface } from './misc';\nimport { isUndefined } from 'mdui.jq/es/utils';\nimport PlainObject from 'mdui.jq/es/interfaces/PlainObject';\nimport { METHOD_TYPE, GET, POST, PUT, PATCH, DELETE } from './requestMethod';\n\nif (isUndefined(defaults.adapter)) {\n  throw new Error(\n    'adapter must be set. e.g. new BrowserAdapter() or new MiniProgramAdapter()',\n  );\n}\n\nconst requestHandle = (\n  method: METHOD_TYPE,\n  url: string,\n  data?: PlainObject | FormData,\n): Promise<ResponseInterface> => {\n  const headers: PlainObject<string> = {};\n  const XHttpMethodOverride = 'X-Http-Method-Override';\n\n  if (defaults.methodOverride) {\n    if (method === PATCH || method === PUT) {\n      headers[XHttpMethodOverride] = method;\n      method = POST;\n    }\n\n    if (method === DELETE) {\n      headers[XHttpMethodOverride] = method;\n      method = GET;\n    }\n  }\n\n  // header 中添加 accept\n  const accepts = ['application/json'];\n  if (\n    typeof document !== 'undefined' &&\n    !![].map &&\n    document\n      .createElement('canvas')\n      .toDataURL('image/webp')\n      .indexOf('data:image/webp') === 0\n  ) {\n    accepts.push('image/webp');\n  }\n  headers['Accept'] = accepts.join(', ');\n\n  return defaults.adapter!.request({ method, url, data, headers });\n};\n\nexport const getRequest = (\n  url: string,\n  data?: PlainObject,\n): Promise<ResponseInterface> => requestHandle(GET, url, data);\n\nexport const postRequest = (\n  url: string,\n  data?: PlainObject | FormData,\n): Promise<ResponseInterface> => requestHandle(POST, url, data);\n\nexport const patchRequest = (\n  url: string,\n  data?: PlainObject,\n): Promise<ResponseInterface> => requestHandle(PATCH, url, data);\n\nexport const putRequest = (\n  url: string,\n  data?: PlainObject,\n): Promise<ResponseInterface> => requestHandle(PUT, url, data);\n\nexport const deleteRequest = (\n  url: string,\n  data?: PlainObject,\n): Promise<ResponseInterface> => requestHandle(DELETE, url, data);\n","import PlainObject from 'mdui.jq/es/interfaces/PlainObject';\nimport param from 'mdui.jq/es/functions/param';\n\n/**\n * 替换 url 中的变量占位符，并添加 queryParam\n * @param path             含变量占位符的 url\n * @param params           含 path 参数、 query 参数、requestBody 参数的对象\n * @param queryParamNames  query 参数名数组\n */\nexport function buildURL(\n  path: string,\n  params: PlainObject = {},\n  queryParamNames: string[] = [],\n): string {\n  // 替换 path 参数\n  const url = path.replace(/({.*?})/g, (match): string => {\n    const pathParamName = match.substr(1, match.length - 2);\n\n    if (params[pathParamName] == null) {\n      throw new Error(`Missing required parameter ${pathParamName}`);\n    }\n\n    return String(params[pathParamName]);\n  });\n\n  // 添加 query 参数\n  const queryObj: PlainObject<string> = {};\n  queryParamNames.forEach((name) => {\n    if (params[name] != null) {\n      queryObj[name] = String(params[name]);\n    }\n  });\n\n  const queryString = param(queryObj);\n\n  return queryString ? `${url}?${queryString}` : url;\n}\n\n/**\n * 生成 requestBody 参数\n * @param params           含 path 参数、 query 参数、requestBody 参数的对象\n * @param requestBodyNames requestBody 参数名数组\n */\nexport function buildRequestBody(\n  params: PlainObject,\n  requestBodyNames: string[],\n): PlainObject {\n  const requestBody: PlainObject = {};\n\n  requestBodyNames.forEach((name) => {\n    if (params[name] != null) {\n      requestBody[name] = params[name];\n    }\n  });\n\n  return requestBody;\n}\n","import {\n  getRequest,\n  postRequest,\n  patchRequest,\n  deleteRequest,\n} from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport {\n  CommentResponse,\n  AnswerResponse,\n  VoteCountResponse,\n  UsersResponse,\n  AnswersResponse,\n  EmptyResponse,\n  CommentsResponse,\n  VoteRequestBodyTypeEnum,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n}\n\ninterface AddVoteParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 投票类型\n   */\n  type: VoteRequestBodyTypeEnum;\n}\n\ninterface CreateCommentParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n  /**\n   * 评论内容\n   */\n  content: string;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的回答ID，最多可提供 100 个 ID\n   */\n  answer_ids: string;\n}\n\ninterface DeleteVoteParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n}\n\ninterface GetParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface GetCommentsParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n  /**\n   * 回答ID\n   */\n  answer_id?: number;\n  /**\n   * 提问ID\n   */\n  question_id?: number;\n  /**\n   * 用户ID\n   */\n  user_id?: number;\n  /**\n   * 🔐是否仅获取回收站中的数据\n   */\n  trashed?: boolean;\n}\n\ninterface GetVotersParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n  /**\n   * 默认获取全部投票类型的用户 `up` 表示仅获取投赞成票的用户 `down` 表示仅获取投反对票的用户\n   */\n  type?: 'up' | 'down';\n}\n\ninterface TrashParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface TrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的回答ID，最多可提供 100 个 ID\n   */\n  answer_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface UntrashParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface UntrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的回答ID，最多可提供 100 个 ID\n   */\n  answer_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface UpdateParams {\n  /**\n   * 回答ID\n   */\n  answer_id: number;\n  /**\n   * Markdown 格式的正文\n   */\n  content_markdown?: string;\n  /**\n   * HTML 格式的正文\n   */\n  content_rendered?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\n/**\n * 🔑删除回答\n * 只要没有错误异常，无论是否有回答被删除，该接口都会返回成功。  管理员可删除回答。回答作者是否可删除回答，由管理员在后台的设置决定。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/answers/{answer_id}', params));\n\n/**\n * 🔑为回答投票\n * 为回答投票。\n */\nexport const addVote = (params: AddVoteParams): Promise<VoteCountResponse> =>\n  postRequest(\n    buildURL('/answers/{answer_id}/voters', params),\n    buildRequestBody(params, ['type']),\n  );\n\n/**\n * 在指定回答下发表评论\n * 在指定回答下发表评论。\n */\nexport const createComment = (\n  params: CreateCommentParams,\n): Promise<CommentResponse> =>\n  postRequest(\n    buildURL('/answers/{answer_id}/comments', params, ['include']),\n    buildRequestBody(params, ['content']),\n  );\n\n/**\n * 🔐批量删除回答\n * 批量删除回答。  只要没有错误异常，无论是否有回答被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/answers/{answer_ids}', params));\n\n/**\n * 🔑取消为回答的投票\n * 取消为回答的投票。\n */\nexport const deleteVote = (\n  params: DeleteVoteParams,\n): Promise<VoteCountResponse> =>\n  deleteRequest(buildURL('/answers/{answer_id}/voters', params));\n\n/**\n * 获取回答详情\n * 获取回答详情。\n */\nexport const get = (params: GetParams): Promise<AnswerResponse> =>\n  getRequest(buildURL('/answers/{answer_id}', params, ['include']));\n\n/**\n * 获取指定回答的评论\n * 获取指定回答的评论。\n */\nexport const getComments = (\n  params: GetCommentsParams,\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/answers/{answer_id}/comments', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 🔐获取回答列表\n * 获取回答列表。\n */\nexport const getList = (params: GetListParams = {}): Promise<AnswersResponse> =>\n  getRequest(\n    buildURL('/answers', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n      'answer_id',\n      'question_id',\n      'user_id',\n      'trashed',\n    ]),\n  );\n\n/**\n * 获取回答的投票者\n * 获取回答的投票者。\n */\nexport const getVoters = (params: GetVotersParams): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/answers/{answer_id}/voters', params, [\n      'page',\n      'per_page',\n      'include',\n      'type',\n    ]),\n  );\n\n/**\n * 🔐把回答放入回收站\n * 把回答放入回收站。\n */\nexport const trash = (params: TrashParams): Promise<AnswerResponse> =>\n  postRequest(buildURL('/answers/{answer_id}/trash', params, ['include']));\n\n/**\n * 🔐批量把回答放入回收站\n * 批量把回答放入回收站。\n */\nexport const trashMultiple = (\n  params: TrashMultipleParams,\n): Promise<AnswersResponse> =>\n  postRequest(buildURL('/answers/{answer_ids}/trash', params, ['include']));\n\n/**\n * 🔐把回答移出回收站\n * 把回答移出回收站。\n */\nexport const untrash = (params: UntrashParams): Promise<AnswerResponse> =>\n  postRequest(buildURL('/answers/{answer_id}/untrash', params, ['include']));\n\n/**\n * 🔐批量把回答移出回收站\n * 批量把回答移出回收站。\n */\nexport const untrashMultiple = (\n  params: UntrashMultipleParams,\n): Promise<AnswersResponse> =>\n  postRequest(buildURL('/answers/{answer_ids}/untrash', params, ['include']));\n\n/**\n * 🔑修改回答信息\n * 管理员可修改回答。回答作者是否可修改回答，由管理员在后台的设置决定。  &#x60;content_markdown&#x60; 和 &#x60;content_rendered&#x60; 两个参数仅传入其中一个即可， 若两个参数都传入，则以 &#x60;content_markdown&#x60; 为准。\n */\nexport const update = (params: UpdateParams): Promise<AnswerResponse> =>\n  patchRequest(\n    buildURL('/answers/{answer_id}', params, ['include']),\n    buildRequestBody(params, ['content_markdown', 'content_rendered']),\n  );\n","import {\n  getRequest,\n  postRequest,\n  patchRequest,\n  deleteRequest,\n} from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport {\n  CommentResponse,\n  VoteCountResponse,\n  ArticleResponse,\n  UsersResponse,\n  EmptyResponse,\n  FollowerCountResponse,\n  ArticlesResponse,\n  CommentsResponse,\n  VoteRequestBodyTypeEnum,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n}\n\ninterface AddFollowParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n}\n\ninterface AddVoteParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 投票类型\n   */\n  type: VoteRequestBodyTypeEnum;\n}\n\ninterface CreateParams {\n  /**\n   * 标题\n   */\n  title: string;\n  /**\n   * 话题ID\n   */\n  topic_ids: Array<number>;\n  /**\n   * Markdown 格式的正文\n   */\n  content_markdown?: string;\n  /**\n   * HTML 格式的正文\n   */\n  content_rendered?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface CreateCommentParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 评论内容\n   */\n  content: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface DeleteFollowParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的文章ID，最多可提供 100 个 ID\n   */\n  article_ids: string;\n}\n\ninterface DeleteVoteParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n}\n\ninterface GetParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetCommentsParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetFollowersParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n  /**\n   * 文章ID\n   */\n  article_id?: number;\n  /**\n   * 用户ID\n   */\n  user_id?: number;\n  /**\n   * 话题ID\n   */\n  topic_id?: number;\n  /**\n   * 🔐是否仅获取回收站中的数据\n   */\n  trashed?: boolean;\n}\n\ninterface GetVotersParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n  /**\n   * 默认获取全部投票类型的用户 `up` 表示仅获取投赞成票的用户 `down` 表示仅获取投反对票的用户\n   */\n  type?: 'up' | 'down';\n}\n\ninterface TrashParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface TrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的文章ID，最多可提供 100 个 ID\n   */\n  article_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface UntrashParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface UntrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的文章ID，最多可提供 100 个 ID\n   */\n  article_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface UpdateParams {\n  /**\n   * 文章ID\n   */\n  article_id: number;\n  /**\n   * 标题\n   */\n  title?: string;\n  /**\n   * 话题ID\n   */\n  topic_ids?: Array<number>;\n  /**\n   * Markdown 格式的正文\n   */\n  content_markdown?: string;\n  /**\n   * HTML 格式的正文\n   */\n  content_rendered?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\n/**\n * 🔑删除文章\n * 只要没有错误异常，无论是否有文章被删除，该接口都会返回成功。  管理员可删除文章。文章作者是否可删除文章，由管理员在后台的设置决定。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/articles/{article_id}', params));\n\n/**\n * 🔑添加关注\n * 添加关注。\n */\nexport const addFollow = (\n  params: AddFollowParams,\n): Promise<FollowerCountResponse> =>\n  postRequest(buildURL('/articles/{article_id}/followers', params));\n\n/**\n * 🔑为文章投票\n * 为文章投票。\n */\nexport const addVote = (params: AddVoteParams): Promise<VoteCountResponse> =>\n  postRequest(\n    buildURL('/articles/{article_id}/voters', params),\n    buildRequestBody(params, ['type']),\n  );\n\n/**\n * 🔑发表文章\n * &#x60;content_markdown&#x60; 和 &#x60;content_rendered&#x60; 两个参数仅传入其中一个即可， 若两个参数都传入，则以 &#x60;content_markdown&#x60; 为准。\n */\nexport const create = (params: CreateParams): Promise<ArticleResponse> =>\n  postRequest(\n    buildURL('/articles', params, ['include']),\n    buildRequestBody(params, [\n      'title',\n      'topic_ids',\n      'content_markdown',\n      'content_rendered',\n    ]),\n  );\n\n/**\n * 🔑在指定文章下发表评论\n * 在指定文章下发表评论。\n */\nexport const createComment = (\n  params: CreateCommentParams,\n): Promise<CommentResponse> =>\n  postRequest(\n    buildURL('/articles/{article_id}/comments', params, ['include']),\n    buildRequestBody(params, ['content']),\n  );\n\n/**\n * 🔑取消关注\n * 取消关注。\n */\nexport const deleteFollow = (\n  params: DeleteFollowParams,\n): Promise<FollowerCountResponse> =>\n  deleteRequest(buildURL('/articles/{article_id}/followers', params));\n\n/**\n * 🔐批量删除文章\n * 批量删除文章。  只要没有错误异常，无论是否有文章被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/articles/{article_ids}', params));\n\n/**\n * 🔑取消为文章的投票\n * 取消为文章的投票。\n */\nexport const deleteVote = (\n  params: DeleteVoteParams,\n): Promise<VoteCountResponse> =>\n  deleteRequest(buildURL('/articles/{article_id}/voters', params));\n\n/**\n * 获取指定文章信息\n * 获取指定文章信息。\n */\nexport const get = (params: GetParams): Promise<ArticleResponse> =>\n  getRequest(buildURL('/articles/{article_id}', params, ['include']));\n\n/**\n * 获取指定文章的评论列表\n * 获取指定文章的评论列表。\n */\nexport const getComments = (\n  params: GetCommentsParams,\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/articles/{article_id}/comments', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定文章的关注者\n * 获取指定文章的关注者。\n */\nexport const getFollowers = (\n  params: GetFollowersParams,\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/articles/{article_id}/followers', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取文章列表\n * 获取文章列表。\n */\nexport const getList = (\n  params: GetListParams = {},\n): Promise<ArticlesResponse> =>\n  getRequest(\n    buildURL('/articles', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n      'article_id',\n      'user_id',\n      'topic_id',\n      'trashed',\n    ]),\n  );\n\n/**\n * 获取文章的投票者\n * 获取文章的投票者。\n */\nexport const getVoters = (params: GetVotersParams): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/articles/{article_id}/voters', params, [\n      'page',\n      'per_page',\n      'include',\n      'type',\n    ]),\n  );\n\n/**\n * 🔐把文章放入回收站\n * 把文章放入回收站。\n */\nexport const trash = (params: TrashParams): Promise<ArticleResponse> =>\n  postRequest(buildURL('/articles/{article_id}/trash', params, ['include']));\n\n/**\n * 🔐批量把文章放入回收站\n * 批量把文章放入回收站。\n */\nexport const trashMultiple = (\n  params: TrashMultipleParams,\n): Promise<ArticlesResponse> =>\n  postRequest(buildURL('/articles/{article_ids}/trash', params, ['include']));\n\n/**\n * 🔐把文章移出回收站\n * 把文章移出回收站。\n */\nexport const untrash = (params: UntrashParams): Promise<ArticleResponse> =>\n  postRequest(buildURL('/articles/{article_id}/untrash', params, ['include']));\n\n/**\n * 🔐批量把文章移出回收站\n * 批量把文章移出回收站。\n */\nexport const untrashMultiple = (\n  params: UntrashMultipleParams,\n): Promise<ArticlesResponse> =>\n  postRequest(buildURL('/articles/{article_ids}/untrash', params, ['include']));\n\n/**\n * 🔑更新文章信息\n * 管理员可修改文章。文章作者是否可修改文章，由管理员在后台的设置决定。  &#x60;content_markdown&#x60; 和 &#x60;content_rendered&#x60; 两个参数仅传入其中一个即可， 若两个参数都传入，则以 &#x60;content_markdown&#x60; 为准。\n */\nexport const update = (params: UpdateParams): Promise<ArticleResponse> =>\n  patchRequest(\n    buildURL('/articles/{article_id}', params, ['include']),\n    buildRequestBody(params, [\n      'title',\n      'topic_ids',\n      'content_markdown',\n      'content_rendered',\n    ]),\n  );\n","import { postRequest } from './util/requestAlias';\nimport { buildURL } from './util/requestHandler';\nimport { CaptchaResponse } from './models';\n\n/**\n * 生成新的图形验证码\n * 生成新的图形验证码。\n */\nexport const generate = (): Promise<CaptchaResponse> =>\n  postRequest(buildURL('/captchas', {}));\n","import {\n  getRequest,\n  postRequest,\n  patchRequest,\n  deleteRequest,\n} from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport {\n  CommentResponse,\n  VoteCountResponse,\n  UsersResponse,\n  EmptyResponse,\n  CommentsResponse,\n  VoteRequestBodyTypeEnum,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n}\n\ninterface AddVoteParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 投票类型\n   */\n  type: VoteRequestBodyTypeEnum;\n}\n\ninterface CreateReplyParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 评论内容\n   */\n  content: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的评论ID，最多可提供 100 个 ID\n   */\n  comment_ids: string;\n}\n\ninterface DeleteVoteParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n}\n\ninterface GetParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n  /**\n   * 评论ID\n   */\n  comment_id?: number;\n  /**\n   * 评论目标的ID\n   */\n  commentable_id?: number;\n  /**\n   * 评论目标类型\n   */\n  commentable_type?: 'article' | 'question' | 'answer' | 'comment';\n  /**\n   * 用户ID\n   */\n  user_id?: number;\n  /**\n   * 🔐是否仅获取回收站中的数据\n   */\n  trashed?: boolean;\n}\n\ninterface GetRepliesParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetVotersParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n  /**\n   * 默认获取全部投票类型的用户 `up` 表示仅获取投赞成票的用户 `down` 表示仅获取投反对票的用户\n   */\n  type?: 'up' | 'down';\n}\n\ninterface TrashParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface TrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的评论ID，最多可提供 100 个 ID\n   */\n  comment_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface UntrashParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface UntrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的评论ID，最多可提供 100 个 ID\n   */\n  comment_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface UpdateParams {\n  /**\n   * 评论ID\n   */\n  comment_id: number;\n  /**\n   * 评论内容\n   */\n  content: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\n/**\n * 🔑删除评论\n * 只要没有错误异常，无论是否有回答被删除，该接口都会返回成功。  管理员可删除评论。评论作者是否可删除评论，由管理员在后台的设置决定。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/comments/{comment_id}', params));\n\n/**\n * 🔑为评论投票\n * 为评论投票。\n */\nexport const addVote = (params: AddVoteParams): Promise<VoteCountResponse> =>\n  postRequest(\n    buildURL('/comments/{comment_id}/voters', params),\n    buildRequestBody(params, ['type']),\n  );\n\n/**\n * 🔑在指定评论下发表回复\n * 在指定评论下发表回复。\n */\nexport const createReply = (\n  params: CreateReplyParams,\n): Promise<CommentResponse> =>\n  postRequest(\n    buildURL('/comments/{comment_id}/replies', params, ['include']),\n    buildRequestBody(params, ['content']),\n  );\n\n/**\n * 🔐批量删除评论\n * 批量删除评论。  只要没有错误异常，无论是否有评论被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/comments/{comment_ids}', params));\n\n/**\n * 🔑取消为评论的投票\n * 取消为评论的投票。\n */\nexport const deleteVote = (\n  params: DeleteVoteParams,\n): Promise<VoteCountResponse> =>\n  deleteRequest(buildURL('/comments/{comment_id}/voters', params));\n\n/**\n * 获取评论详情\n * 获取评论详情。\n */\nexport const get = (params: GetParams): Promise<CommentResponse> =>\n  getRequest(buildURL('/comments/{comment_id}', params, ['include']));\n\n/**\n * 🔐获取所有评论\n * 获取所有评论。\n */\nexport const getList = (\n  params: GetListParams = {},\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/comments', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n      'comment_id',\n      'commentable_id',\n      'commentable_type',\n      'user_id',\n      'trashed',\n    ]),\n  );\n\n/**\n * 获取指定评论的回复\n * 获知指定评论的回复。\n */\nexport const getReplies = (\n  params: GetRepliesParams,\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/comments/{comment_id}/replies', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取评论的投票者\n * 获取评论的投票者。\n */\nexport const getVoters = (params: GetVotersParams): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/comments/{comment_id}/voters', params, [\n      'page',\n      'per_page',\n      'include',\n      'type',\n    ]),\n  );\n\n/**\n * 🔐把评论放入回收站\n * 把评论放入回收站。\n */\nexport const trash = (params: TrashParams): Promise<CommentResponse> =>\n  postRequest(buildURL('/comments/{comment_id}/trash', params, ['include']));\n\n/**\n * 🔐批量把评论放入回收站\n * 批量把评论放入回收站。\n */\nexport const trashMultiple = (\n  params: TrashMultipleParams,\n): Promise<CommentsResponse> =>\n  postRequest(buildURL('/comments/{comment_ids}/trash', params, ['include']));\n\n/**\n * 🔐把评论移出回收站\n * 把评论移出回收站。\n */\nexport const untrash = (params: UntrashParams): Promise<CommentResponse> =>\n  postRequest(buildURL('/comments/{comment_id}/untrash', params, ['include']));\n\n/**\n * 🔐批量把评论移出回收站\n * 批量把评论移出回收站。\n */\nexport const untrashMultiple = (\n  params: UntrashMultipleParams,\n): Promise<CommentsResponse> =>\n  postRequest(buildURL('/comments/{comment_ids}/untrash', params, ['include']));\n\n/**\n * 🔑修改评论\n * 管理员可修改评论。评论作者是否可修改评论，由管理员在后台的设置决定。\n */\nexport const update = (params: UpdateParams): Promise<CommentResponse> =>\n  patchRequest(\n    buildURL('/comments/{comment_id}', params, ['include']),\n    buildRequestBody(params, ['content']),\n  );\n","import { postRequest } from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport { EmailResponse } from './models';\n\ninterface SendParams {\n  /**\n   * 邮箱地址\n   */\n  email: Array<string>;\n  /**\n   * 邮件标题\n   */\n  subject: string;\n  /**\n   * 邮件内容\n   */\n  content: string;\n}\n\n/**\n * 🔐发送邮件\n * 用于后台管理员发送邮件。\n */\nexport const send = (params: SendParams): Promise<EmailResponse> =>\n  postRequest(\n    buildURL('/emails', params),\n    buildRequestBody(params, ['email', 'subject', 'content']),\n  );\n","import {\n  getRequest,\n  postRequest,\n  patchRequest,\n  deleteRequest,\n} from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport { ImageResponse, EmptyResponse, ImagesResponse } from './models';\n\ninterface DeleteParams {\n  /**\n   * 图片key\n   */\n  key: string;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的评论ID，最多可提供 100 个 ID\n   */\n  keys: string;\n}\n\ninterface GetParams {\n  /**\n   * 图片key\n   */\n  key: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `article`, `answer`\n   */\n  include?: Array<'user' | 'question' | 'article' | 'answer'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `article`, `answer`\n   */\n  include?: Array<'user' | 'question' | 'article' | 'answer'>;\n  /**\n   * 图片key\n   */\n  key?: string;\n  /**\n   * 图片关联对象的类型\n   */\n  item_type?: 'question' | 'answer' | 'article';\n  /**\n   * 图片关联对象的ID\n   */\n  item_id?: number;\n  /**\n   * 用户ID\n   */\n  user_id?: number;\n}\n\ninterface UpdateParams {\n  /**\n   * 图片key\n   */\n  key: string;\n  /**\n   * 图片文件名\n   */\n  filename: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `article`, `answer`\n   */\n  include?: Array<'user' | 'question' | 'article' | 'answer'>;\n}\n\ninterface UploadParams {\n  /**\n   * 图片\n   */\n  image: File;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `article`, `answer`\n   */\n  include?: Array<'user' | 'question' | 'article' | 'answer'>;\n}\n\n/**\n * 🔐删除指定图片\n * 删除指定图片。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/images/{key}', params));\n\n/**\n * 🔐批量删除图片\n * 批量删除图片。  只要没有错误异常，无论是否有记录被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> => deleteRequest(buildURL('/images/{keys}', params));\n\n/**\n * 获取指定图片信息\n * 获取指定图片信息。\n */\nexport const get = (params: GetParams): Promise<ImageResponse> =>\n  getRequest(buildURL('/images/{key}', params, ['include']));\n\n/**\n * 🔐获取图片列表\n * 获取图片列表。\n */\nexport const getList = (params: GetListParams = {}): Promise<ImagesResponse> =>\n  getRequest(\n    buildURL('/images', params, [\n      'page',\n      'per_page',\n      'include',\n      'key',\n      'item_type',\n      'item_id',\n      'user_id',\n    ]),\n  );\n\n/**\n * 🔐更新指定图片信息\n * 更新指定图片信息。\n */\nexport const update = (params: UpdateParams): Promise<ImageResponse> =>\n  patchRequest(\n    buildURL('/images/{key}', params, ['include']),\n    buildRequestBody(params, ['filename']),\n  );\n\n/**\n * 🔑上传图片\n * 上传图片。\n */\nexport const upload = (params: UploadParams): Promise<ImageResponse> => {\n  const formData = new FormData();\n  formData.append('image', params.image);\n\n  return postRequest(buildURL('/images', params, ['include']), formData);\n};\n","import { getRequest, postRequest, deleteRequest } from './util/requestAlias';\nimport { buildURL } from './util/requestHandler';\nimport {\n  NotificationsResponse,\n  NotificationResponse,\n  EmptyResponse,\n  NotificationCountResponse,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 通知ID\n   */\n  notification_id: number;\n}\n\ninterface DeleteAllParams {\n  /**\n   * 通知类型\n   */\n  type?:\n    | 'question_answered'\n    | 'question_commented'\n    | 'question_deleted'\n    | 'article_commented'\n    | 'article_deleted'\n    | 'answer_commented'\n    | 'answer_deleted'\n    | 'comment_replied'\n    | 'comment_deleted';\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的通知ID，最多提供 100 个 ID\n   */\n  notification_ids: string;\n}\n\ninterface GetCountParams {\n  /**\n   * 通知类型\n   */\n  type?:\n    | 'question_answered'\n    | 'question_commented'\n    | 'question_deleted'\n    | 'article_commented'\n    | 'article_deleted'\n    | 'answer_commented'\n    | 'answer_deleted'\n    | 'comment_replied'\n    | 'comment_deleted';\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `receiver`, `sender`, `article`, `question`, `answer`, `comment`, `reply`\n   */\n  include?: Array<\n    | 'receiver'\n    | 'sender'\n    | 'article'\n    | 'question'\n    | 'answer'\n    | 'comment'\n    | 'reply'\n  >;\n  /**\n   * 通知类型\n   */\n  type?:\n    | 'question_answered'\n    | 'question_commented'\n    | 'question_deleted'\n    | 'article_commented'\n    | 'article_deleted'\n    | 'answer_commented'\n    | 'answer_deleted'\n    | 'comment_replied'\n    | 'comment_deleted';\n  /**\n   * 默认包含已读和未读的通知。若 `read` 为 `true`，则仅包含已读的通知；若为 `false`，则仅包含未读的通知。\n   */\n  read?: boolean;\n}\n\ninterface ReadParams {\n  /**\n   * 通知ID\n   */\n  notification_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `receiver`, `sender`, `article`, `question`, `answer`, `comment`, `reply`\n   */\n  include?: Array<\n    | 'receiver'\n    | 'sender'\n    | 'article'\n    | 'question'\n    | 'answer'\n    | 'comment'\n    | 'reply'\n  >;\n}\n\ninterface ReadAllParams {\n  /**\n   * 通知类型\n   */\n  type?:\n    | 'question_answered'\n    | 'question_commented'\n    | 'question_deleted'\n    | 'article_commented'\n    | 'article_deleted'\n    | 'answer_commented'\n    | 'answer_deleted'\n    | 'comment_replied'\n    | 'comment_deleted';\n}\n\ninterface ReadMultipleParams {\n  /**\n   * 多个用 `,` 分隔的通知ID，最多提供 100 个 ID\n   */\n  notification_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `receiver`, `sender`, `article`, `question`, `answer`, `comment`, `reply`\n   */\n  include?: Array<\n    | 'receiver'\n    | 'sender'\n    | 'article'\n    | 'question'\n    | 'answer'\n    | 'comment'\n    | 'reply'\n  >;\n}\n\n/**\n * 🔑删除一条通知\n * 只要没有错误异常，无论是否有通知被删除，该接口都会返回成功。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/notifications/{notification_id}', params));\n\n/**\n * 🔑删除所有通知\n * 只要没有错误异常，无论是否有通知被删除，该接口都会返回成功。\n */\nexport const deleteAll = (\n  params: DeleteAllParams = {},\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/notifications', params, ['type']));\n\n/**\n * 🔑批量删除通知\n * 只要没有错误异常，无论是否有通知被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/notifications/{notification_ids}', params));\n\n/**\n * 🔑获取未读通知数量\n * 获取未读通知数量。\n */\nexport const getCount = (\n  params: GetCountParams = {},\n): Promise<NotificationCountResponse> =>\n  getRequest(buildURL('/notifications/count', params, ['type']));\n\n/**\n * 🔑获取通知列表\n * 获取通知列表。\n */\nexport const getList = (\n  params: GetListParams = {},\n): Promise<NotificationsResponse> =>\n  getRequest(\n    buildURL('/notifications', params, [\n      'page',\n      'per_page',\n      'include',\n      'type',\n      'read',\n    ]),\n  );\n\n/**\n * 🔑把一条通知标记为已读\n * 把一条通知标记为已读。\n */\nexport const read = (params: ReadParams): Promise<NotificationResponse> =>\n  postRequest(\n    buildURL('/notifications/{notification_id}/read', params, ['include']),\n  );\n\n/**\n * 🔑把所有通知标记为已读\n * 只要没有错误异常。无论是否有通知被标记为已读，该接口都会返回成功。\n */\nexport const readAll = (params: ReadAllParams = {}): Promise<EmptyResponse> =>\n  postRequest(buildURL('/notifications/read', params, ['type']));\n\n/**\n * 🔑批量把通知标记为已读\n * 批量把通知标记为已读。\n */\nexport const readMultiple = (\n  params: ReadMultipleParams,\n): Promise<NotificationsResponse> =>\n  postRequest(\n    buildURL('/notifications/{notification_ids}/read', params, ['include']),\n  );\n","import { getRequest, patchRequest } from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport { OptionResponse, OptionUpdateRequestBody } from './models';\n\n/**\n * 获取站点全局设置参数\n * 获取站点全局设置参数。\n */\nexport const get = (): Promise<OptionResponse> =>\n  getRequest(buildURL('/options', {}));\n\n/**\n * 🔐更新站点全局设置\n * 更新站点全局设置。\n */\nexport const update = (\n  params: OptionUpdateRequestBody,\n): Promise<OptionResponse> =>\n  patchRequest(\n    buildURL('/options', params),\n    buildRequestBody(params, [\n      'answer_can_delete',\n      'answer_can_delete_before',\n      'answer_can_delete_only_no_comment',\n      'answer_can_edit',\n      'answer_can_edit_before',\n      'answer_can_edit_only_no_comment',\n      'article_can_delete',\n      'article_can_delete_before',\n      'article_can_delete_only_no_comment',\n      'article_can_edit',\n      'article_can_edit_before',\n      'article_can_edit_only_no_comment',\n      'cache_memcached_host',\n      'cache_memcached_password',\n      'cache_memcached_port',\n      'cache_memcached_username',\n      'cache_prefix',\n      'cache_redis_host',\n      'cache_redis_password',\n      'cache_redis_port',\n      'cache_redis_username',\n      'cache_type',\n      'comment_can_delete',\n      'comment_can_delete_before',\n      'comment_can_edit',\n      'comment_can_edit_before',\n      'language',\n      'question_can_delete',\n      'question_can_delete_before',\n      'question_can_delete_only_no_answer',\n      'question_can_delete_only_no_comment',\n      'question_can_edit',\n      'question_can_edit_before',\n      'question_can_edit_only_no_answer',\n      'question_can_edit_only_no_comment',\n      'search_third',\n      'search_type',\n      'site_description',\n      'site_gongan_beian',\n      'site_icp_beian',\n      'site_keywords',\n      'site_name',\n      'site_static_url',\n      'smtp_host',\n      'smtp_password',\n      'smtp_port',\n      'smtp_reply_to',\n      'smtp_secure',\n      'smtp_username',\n      'storage_aliyun_access_id',\n      'storage_aliyun_access_secret',\n      'storage_aliyun_bucket',\n      'storage_aliyun_dir',\n      'storage_aliyun_endpoint',\n      'storage_ftp_host',\n      'storage_ftp_passive',\n      'storage_ftp_password',\n      'storage_ftp_port',\n      'storage_ftp_dir',\n      'storage_ftp_ssl',\n      'storage_ftp_username',\n      'storage_local_dir',\n      'storage_qiniu_access_id',\n      'storage_qiniu_access_secret',\n      'storage_qiniu_bucket',\n      'storage_qiniu_dir',\n      'storage_qiniu_zone',\n      'storage_sftp_host',\n      'storage_sftp_password',\n      'storage_sftp_port',\n      'storage_sftp_dir',\n      'storage_sftp_username',\n      'storage_type',\n      'storage_upyun_bucket',\n      'storage_upyun_dir',\n      'storage_upyun_operator',\n      'storage_upyun_password',\n      'storage_url',\n      'theme',\n    ]),\n  );\n","import {\n  getRequest,\n  postRequest,\n  patchRequest,\n  deleteRequest,\n} from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport {\n  CommentResponse,\n  AnswerResponse,\n  UsersResponse,\n  AnswersResponse,\n  QuestionResponse,\n  CommentsResponse,\n  QuestionsResponse,\n  VoteCountResponse,\n  EmptyResponse,\n  FollowerCountResponse,\n  VoteRequestBodyTypeEnum,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n}\n\ninterface AddFollowParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n}\n\ninterface AddVoteParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 投票类型\n   */\n  type: VoteRequestBodyTypeEnum;\n}\n\ninterface CreateParams {\n  /**\n   * 标题\n   */\n  title: string;\n  /**\n   * 话题ID\n   */\n  topic_ids: Array<number>;\n  /**\n   * Markdown 格式的正文\n   */\n  content_markdown?: string;\n  /**\n   * HTML 格式的正文\n   */\n  content_rendered?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface CreateAnswerParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * Markdown 格式的正文\n   */\n  content_markdown?: string;\n  /**\n   * HTML 格式的正文\n   */\n  content_rendered?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface CreateCommentParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 评论内容\n   */\n  content: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface DeleteFollowParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的提问ID，最多可提供 100 个 ID\n   */\n  question_ids: string;\n}\n\ninterface DeleteVoteParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n}\n\ninterface GetParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetAnswersParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface GetCommentsParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetFollowersParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n  /**\n   * 提问ID\n   */\n  question_id?: number;\n  /**\n   * 用户ID\n   */\n  user_id?: number;\n  /**\n   * 话题ID\n   */\n  topic_id?: number;\n  /**\n   * 🔐是否仅获取回收站中的数据\n   */\n  trashed?: boolean;\n}\n\ninterface GetVotersParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n  /**\n   * 默认获取全部投票类型的用户 `up` 表示仅获取投赞成票的用户 `down` 表示仅获取投反对票的用户\n   */\n  type?: 'up' | 'down';\n}\n\ninterface TrashParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface TrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的提问ID，最多可提供 100 个 ID\n   */\n  question_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface UntrashParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface UntrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的提问ID，最多可提供 100 个 ID\n   */\n  question_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface UpdateParams {\n  /**\n   * 提问ID\n   */\n  question_id: number;\n  /**\n   * 标题\n   */\n  title?: string;\n  /**\n   * 话题ID\n   */\n  topic_ids?: Array<number>;\n  /**\n   * Markdown 格式的正文\n   */\n  content_markdown?: string;\n  /**\n   * HTML 格式的正文\n   */\n  content_rendered?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\n/**\n * 🔑删除提问\n * 只要没有错误异常，无论是否有回答被删除，该接口都会返回成功。  管理员可删除提问。提问作者是否可删除提问，由管理员在后台的设置决定。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/questions/{question_id}', params));\n\n/**\n * 🔑添加关注\n * 添加关注。\n */\nexport const addFollow = (\n  params: AddFollowParams,\n): Promise<FollowerCountResponse> =>\n  postRequest(buildURL('/questions/{question_id}/followers', params));\n\n/**\n * 🔑为提问投票\n * 为提问投票。\n */\nexport const addVote = (params: AddVoteParams): Promise<VoteCountResponse> =>\n  postRequest(\n    buildURL('/questions/{question_id}/voters', params),\n    buildRequestBody(params, ['type']),\n  );\n\n/**\n * 🔑发表提问\n * &#x60;content_markdown&#x60; 和 &#x60;content_rendered&#x60; 两个参数仅传入其中一个即可， 若两个参数都传入，则以 &#x60;content_markdown&#x60; 为准。\n */\nexport const create = (params: CreateParams): Promise<QuestionResponse> =>\n  postRequest(\n    buildURL('/questions', params, ['include']),\n    buildRequestBody(params, [\n      'title',\n      'topic_ids',\n      'content_markdown',\n      'content_rendered',\n    ]),\n  );\n\n/**\n * 🔑在指定提问下发表回答\n * &#x60;content_markdown&#x60; 和 &#x60;content_rendered&#x60; 两个参数仅传入其中一个即可， 若两个参数都传入，则以 &#x60;content_markdown&#x60; 为准。\n */\nexport const createAnswer = (\n  params: CreateAnswerParams,\n): Promise<AnswerResponse> =>\n  postRequest(\n    buildURL('/questions/{question_id}/answers', params, ['include']),\n    buildRequestBody(params, ['content_markdown', 'content_rendered']),\n  );\n\n/**\n * 🔑在指定提问下发表评论\n * 在指定提问下发表评论。\n */\nexport const createComment = (\n  params: CreateCommentParams,\n): Promise<CommentResponse> =>\n  postRequest(\n    buildURL('/questions/{question_id}/comments', params, ['include']),\n    buildRequestBody(params, ['content']),\n  );\n\n/**\n * 🔑取消关注\n * 取消关注。\n */\nexport const deleteFollow = (\n  params: DeleteFollowParams,\n): Promise<FollowerCountResponse> =>\n  deleteRequest(buildURL('/questions/{question_id}/followers', params));\n\n/**\n * 🔐批量删除提问\n * 批量删除提问。  只要没有错误异常，无论是否有提问被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/questions/{question_ids}', params));\n\n/**\n * 🔑取消为提问的投票\n * 取消为提问的投票。\n */\nexport const deleteVote = (\n  params: DeleteVoteParams,\n): Promise<VoteCountResponse> =>\n  deleteRequest(buildURL('/questions/{question_id}/voters', params));\n\n/**\n * 获取指定提问信息\n * 获取指定提问信息。\n */\nexport const get = (params: GetParams): Promise<QuestionResponse> =>\n  getRequest(buildURL('/questions/{question_id}', params, ['include']));\n\n/**\n * 获取指定提问下的回答\n * 获取指定提问下的回答。\n */\nexport const getAnswers = (\n  params: GetAnswersParams,\n): Promise<AnswersResponse> =>\n  getRequest(\n    buildURL('/questions/{question_id}/answers', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定提问的评论\n * 获取指定提问的评论。\n */\nexport const getComments = (\n  params: GetCommentsParams,\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/questions/{question_id}/comments', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定提问的关注者\n * 获取指定提问的关注者。\n */\nexport const getFollowers = (\n  params: GetFollowersParams,\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/questions/{question_id}/followers', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取提问列表\n * 获取提问列表。\n */\nexport const getList = (\n  params: GetListParams = {},\n): Promise<QuestionsResponse> =>\n  getRequest(\n    buildURL('/questions', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n      'question_id',\n      'user_id',\n      'topic_id',\n      'trashed',\n    ]),\n  );\n\n/**\n * 获取提问的投票者\n * 获取提问的投票者。\n */\nexport const getVoters = (params: GetVotersParams): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/questions/{question_id}/voters', params, [\n      'page',\n      'per_page',\n      'include',\n      'type',\n    ]),\n  );\n\n/**\n * 🔐把提问放入回收站\n * 把提问放入回收站。\n */\nexport const trash = (params: TrashParams): Promise<QuestionResponse> =>\n  postRequest(buildURL('/questions/{question_id}/trash', params, ['include']));\n\n/**\n * 🔐批量把提问放入回收站\n * 批量把提问放入回收站。\n */\nexport const trashMultiple = (\n  params: TrashMultipleParams,\n): Promise<QuestionsResponse> =>\n  postRequest(buildURL('/questions/{question_ids}/trash', params, ['include']));\n\n/**\n * 🔐把提问移出回收站\n * 把提问移出回收站。\n */\nexport const untrash = (params: UntrashParams): Promise<QuestionResponse> =>\n  postRequest(\n    buildURL('/questions/{question_id}/untrash', params, ['include']),\n  );\n\n/**\n * 🔐批量把提问移出回收站\n * 批量把提问移出回收站。\n */\nexport const untrashMultiple = (\n  params: UntrashMultipleParams,\n): Promise<QuestionsResponse> =>\n  postRequest(\n    buildURL('/questions/{question_ids}/untrash', params, ['include']),\n  );\n\n/**\n * 🔑更新提问信息\n * 管理员可修改提问。提问作者是否可修改提问，由管理员在后台的设置决定。  &#x60;content_markdown&#x60; 和 &#x60;content_rendered&#x60; 两个参数仅传入其中一个即可， 若两个参数都传入，则以 &#x60;content_markdown&#x60; 为准。\n */\nexport const update = (params: UpdateParams): Promise<QuestionResponse> =>\n  patchRequest(\n    buildURL('/questions/{question_id}', params, ['include']),\n    buildRequestBody(params, [\n      'title',\n      'topic_ids',\n      'content_markdown',\n      'content_rendered',\n    ]),\n  );\n","import { getRequest, postRequest, deleteRequest } from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport {\n  ReportsResponse,\n  ReportResponse,\n  ReportGroupsResponse,\n  EmptyResponse,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 目标类型\n   */\n  reportable_type: 'question' | 'answer' | 'article' | 'comment' | 'user';\n  /**\n   * 目标ID\n   */\n  reportable_id: number;\n}\n\ninterface CreateParams {\n  /**\n   * 目标类型\n   */\n  reportable_type: 'question' | 'answer' | 'article' | 'comment' | 'user';\n  /**\n   * 目标ID\n   */\n  reportable_id: number;\n  /**\n   * 举报理由\n   */\n  reason: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `reporter`, `question`, `answer`, `article`, `comment`, `user`\n   */\n  include?: Array<\n    'reporter' | 'question' | 'answer' | 'article' | 'comment' | 'user'\n  >;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 类型和ID之间用 `:` 分隔，多个记录之间用 `,` 分隔，最多可提供 100 个。  例如 `question:12,comment:34`\n   */\n  report_targets: string;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `question`, `answer`, `article`, `comment`, `user`\n   */\n  include?: Array<'question' | 'answer' | 'article' | 'comment' | 'user'>;\n  /**\n   * 目标类型\n   */\n  reportable_type?: 'question' | 'answer' | 'article' | 'comment' | 'user';\n}\n\ninterface GetReasonsParams {\n  /**\n   * 目标类型\n   */\n  reportable_type: 'question' | 'answer' | 'article' | 'comment' | 'user';\n  /**\n   * 目标ID\n   */\n  reportable_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `reporter`, `question`, `answer`, `article`, `comment`, `user`\n   */\n  include?: Array<\n    'reporter' | 'question' | 'answer' | 'article' | 'comment' | 'user'\n  >;\n}\n\n/**\n * 🔐删除举报\n * 删除举报。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/reports/{reportable_type}:{reportable_id}', params));\n\n/**\n * 🔑添加举报\n * 添加举报。\n */\nexport const create = (params: CreateParams): Promise<ReportResponse> =>\n  postRequest(\n    buildURL('/reports/{reportable_type}:{reportable_id}', params, ['include']),\n    buildRequestBody(params, ['reason']),\n  );\n\n/**\n * 🔐批量删除举报\n * 批量删除举报。  只要没有错误异常，无论是否有记录被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/reports/{report_targets}', params));\n\n/**\n * 🔐获取被举报的内容列表\n * 获取被举报的内容列表。\n */\nexport const getList = (\n  params: GetListParams = {},\n): Promise<ReportGroupsResponse> =>\n  getRequest(\n    buildURL('/reports', params, [\n      'page',\n      'per_page',\n      'include',\n      'reportable_type',\n    ]),\n  );\n\n/**\n * 🔐获取被举报内容的举报详情\n * 获取被举报内容的举报详情。\n */\nexport const getReasons = (\n  params: GetReasonsParams,\n): Promise<ReportsResponse> =>\n  getRequest(\n    buildURL('/reports/{reportable_type}:{reportable_id}', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n","import { getRequest } from './util/requestAlias';\nimport { buildURL } from './util/requestHandler';\nimport { StatsResponse } from './models';\n\ninterface GetParams {\n  /**\n   * 统计数据中包含的数据，用“,”分隔，可以为 `system_info`, `total_user`, `total_question`, `total_article`, `total_answer`, `total_comment`, `new_user`, `new_question`, `new_article`, `new_answer`, `new_comment`\n   */\n  include?: Array<\n    | 'system_info'\n    | 'total_user'\n    | 'total_question'\n    | 'total_article'\n    | 'total_answer'\n    | 'total_comment'\n    | 'new_user'\n    | 'new_question'\n    | 'new_article'\n    | 'new_answer'\n    | 'new_comment'\n  >;\n  /**\n   * 统计数据的起始日期，例如 `2017-3-14`\n   */\n  startDate?: string;\n  /**\n   * 统计数据的截止日期，例如 `2020-5-12`\n   */\n  endDate?: string;\n}\n\n/**\n * 🔐获取站点统计数据\n * 获取站点统计数据。\n */\nexport const get = (params: GetParams): Promise<StatsResponse> =>\n  getRequest(buildURL('/stats', params, ['include', 'start_date', 'end_date']));\n","/**\n * @file This is a SHA-1 hash generator by JavaScript.\n * @author Hsun\n * @description For your convenience, the code comments have been translated by Google.\n ***/\n\n// 消息填充位，补足长度。\n// Message padding bits, complement the length.\nfunction fillString(str) {\n  var blockAmount = ((str.length + 8) >> 6) + 1,\n    blocks = [],\n    i;\n\n  for (i = 0; i < blockAmount * 16; i++) {\n    blocks[i] = 0;\n  }\n  for (i = 0; i < str.length; i++) {\n    blocks[i >> 2] |= str.charCodeAt(i) << (24 - (i & 3) * 8);\n  }\n  blocks[i >> 2] |= 0x80 << (24 - (i & 3) * 8);\n  blocks[blockAmount * 16 - 1] = str.length * 8;\n\n  return blocks;\n}\n\n// 将输入的二进制数组转化为十六进制的字符串。\n// Convert the input binary array to a hexadecimal string.\nfunction binToHex(binArray) {\n  var hexString = \"0123456789abcdef\",\n    str = \"\",\n    i;\n\n  for (i = 0; i < binArray.length * 4; i++) {\n    str += hexString.charAt((binArray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +\n      hexString.charAt((binArray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);\n  }\n\n  return str;\n}\n\n// 核心函数，输出为长度为5的number数组，对应160位的消息摘要。\n// The core function, the output is a number array with a length of 5,\n// corresponding to a 160-bit message digest.\nfunction core(blockArray) {\n  var w = [],\n    a = 0x67452301,\n    b = 0xEFCDAB89,\n    c = 0x98BADCFE,\n    d = 0x10325476,\n    e = 0xC3D2E1F0,\n    olda,\n    oldb,\n    oldc,\n    oldd,\n    olde,\n    t,\n    i,\n    j;\n\n  for (i = 0; i < blockArray.length; i += 16) {  //每次处理512位 16*32\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    olde = e;\n\n    for (j = 0; j < 80; j++) {  //对每个512位进行80步操作\n      if (j < 16) {\n        w[j] = blockArray[i + j];\n      } else {\n        w[j] = cyclicShift(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n      t = modPlus(modPlus(cyclicShift(a, 5), ft(j, b, c, d)), modPlus(modPlus(e, w[j]), kt(j)));\n      e = d;\n      d = c;\n      c = cyclicShift(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = modPlus(a, olda);\n    b = modPlus(b, oldb);\n    c = modPlus(c, oldc);\n    d = modPlus(d, oldd);\n    e = modPlus(e, olde);\n  }\n\n  return [a, b, c, d, e];\n}\n\n// 根据t值返回相应得压缩函数中用到的f函数。\n// According to the t value, return the corresponding f function used in\n// the compression function.\nfunction ft(t, b, c, d) {\n  if (t < 20) {\n    return (b & c) | ((~b) & d);\n  } else if (t < 40) {\n    return b ^ c ^ d;\n  } else if (t < 60) {\n    return (b & c) | (b & d) | (c & d);\n  } else {\n    return b ^ c ^ d;\n  }\n}\n\n// 根据t值返回相应得压缩函数中用到的K值。\n// According to the t value, return the corresponding K value used in\n// the compression function.\nfunction kt(t) {\n  return (t < 20) ? 0x5A827999 :\n    (t < 40) ? 0x6ED9EBA1 :\n      (t < 60) ? 0x8F1BBCDC : 0xCA62C1D6;\n}\n\n// 模2的32次方加法，因为JavaScript的number是双精度浮点数表示，所以将32位数拆成高16位和低16位分别进行相加\n// Modulo 2 to the 32nd power addition, because JavaScript's number is a\n// double-precision floating-point number, so the 32-bit number is split\n// into the upper 16 bits and the lower 16 bits are added separately.\nfunction modPlus(x, y) {\n  var low = (x & 0xFFFF) + (y & 0xFFFF),\n    high = (x >> 16) + (y >> 16) + (low >> 16);\n\n  return (high << 16) | (low & 0xFFFF);\n}\n\n// 对输入的32位的num二进制数进行循环左移 ,因为JavaScript的number是双精度浮点数表示，所以移位需需要注意\n// Rotate left of the input 32-bit num binary number, because JavaScript's\n// number is a double-precision floating-point number, so you need to pay\n//  attention to the shift.\nfunction cyclicShift(num, k) {\n  return (num << k) | (num >>> (32 - k));\n}\n\n// 主函数根据输入的消息字符串计算消息摘要，返回十六进制表示的消息摘要\n// The main function calculates the message digest based on the input message\n// string and returns the message digest in hexadecimal.\nfunction sha1(s) {\n  return binToHex(core(fillString(s)));\n}\n\nexport default sha1;\n","// @ts-ignore\nimport sha1 from 'sha-1';\nimport { postRequest } from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport { TokenResponse } from './models';\nimport defaults from './defaults';\n\ninterface LoginParams {\n  /**\n   * 用户名或邮箱\n   */\n  name: string;\n  /**\n   * 经过 hash1 加密后的密码\n   */\n  password: string;\n  /**\n   * 设备信息\n   */\n  device?: string;\n  /**\n   * 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数\n   */\n  captcha_token?: string;\n  /**\n   * 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数\n   */\n  captcha_code?: string;\n}\n\n/**\n * 生成 Token\n * 通过账号密码登陆，返回 Token 信息。  若登录失败，且返回信息中含参数 &#x60;captcha_token&#x60; 和 &#x60;captcha_image&#x60;， 表示下次调用该接口时，需要用户输入图形验证码，并把 &#x60;captcha_token&#x60; 和 &#x60;captcha_code&#x60; 参数传递到服务端。\n */\nexport const login = (params: LoginParams): Promise<TokenResponse> => {\n  if (params.password) {\n    params.password = sha1(params.password);\n  }\n\n  return postRequest(\n    buildURL('/tokens', params),\n    buildRequestBody(params, [\n      'name',\n      'password',\n      'device',\n      'captcha_token',\n      'captcha_code',\n    ]),\n  ).then((response) => {\n    if (!response.code) {\n      defaults.adapter!.setStorage(\n        'token',\n        (response as TokenResponse).data.token,\n      );\n    }\n\n    return response;\n  });\n};\n","import { getRequest, postRequest, deleteRequest } from './util/requestAlias';\nimport { buildURL } from './util/requestHandler';\nimport {\n  QuestionsResponse,\n  TopicsResponse,\n  UsersResponse,\n  TopicResponse,\n  EmptyResponse,\n  FollowerCountResponse,\n  ArticlesResponse,\n} from './models';\n\ninterface DeleteParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n}\n\ninterface AddFollowParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n}\n\ninterface CreateParams {\n  /**\n   * 话题名称\n   */\n  name: string;\n  /**\n   * 话题描述\n   */\n  description: string;\n  /**\n   * 封面图片\n   */\n  cover: File;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface DeleteFollowParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n}\n\ninterface DeleteMultipleParams {\n  /**\n   * 多个用 `,` 分隔的话题ID，最多可提供 100 个 ID\n   */\n  topic_ids: string;\n}\n\ninterface GetParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface GetArticlesParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetFollowersParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `topic_id`、`follower_count`、`delete_time`。默认为 `topic_id`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'topic_id'\n    | 'follower_count'\n    | 'delete_time'\n    | '-topic_id'\n    | '-follower_count'\n    | '-delete_time';\n  /**\n   * 话题ID\n   */\n  topic_id?: number;\n  /**\n   * 话题名称\n   */\n  name?: string;\n  /**\n   * 🔐是否仅获取回收站中的数据\n   */\n  trashed?: boolean;\n}\n\ninterface GetQuestionsParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface TrashParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface TrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的话题ID，最多可提供 100 个 ID\n   */\n  topic_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface UntrashParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface UntrashMultipleParams {\n  /**\n   * 多个用 `,` 分隔的话题ID，最多可提供 100 个 ID\n   */\n  topic_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface UpdateParams {\n  /**\n   * 话题ID\n   */\n  topic_id: number;\n  /**\n   * 话题名称\n   */\n  name?: string;\n  /**\n   * 话题描述\n   */\n  description?: string;\n  /**\n   * 封面图片\n   */\n  cover?: File;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\n/**\n * 🔐删除话题\n * 删除话题。  只要没有错误异常，无论是否有话题被删除，该接口都会返回成功。\n */\nexport const del = (params: DeleteParams): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/topics/{topic_id}', params));\n\n/**\n * 🔑关注指定话题\n * 关注指定话题。\n */\nexport const addFollow = (\n  params: AddFollowParams,\n): Promise<FollowerCountResponse> =>\n  postRequest(buildURL('/topics/{topic_id}/followers', params));\n\n/**\n * 🔐发布话题\n * 发布话题。\n */\nexport const create = (params: CreateParams): Promise<TopicResponse> => {\n  const formData = new FormData();\n  formData.append('name', params.name);\n  formData.append('description', params.description);\n  formData.append('cover', params.cover);\n\n  return postRequest(buildURL('/topics', params, ['include']), formData);\n};\n\n/**\n * 🔑取消关注指定话题\n * 取消关注指定话题。\n */\nexport const deleteFollow = (\n  params: DeleteFollowParams,\n): Promise<FollowerCountResponse> =>\n  deleteRequest(buildURL('/topics/{topic_id}/followers', params));\n\n/**\n * 🔐批量删除话题\n * 批量删除话题。  只要没有错误异常，无论是否有话题被删除，该接口都会返回成功。\n */\nexport const deleteMultiple = (\n  params: DeleteMultipleParams,\n): Promise<EmptyResponse> =>\n  deleteRequest(buildURL('/topics/{topic_ids}', params));\n\n/**\n * 获取指定话题信息\n * 获取指定话题信息。\n */\nexport const get = (params: GetParams): Promise<TopicResponse> =>\n  getRequest(buildURL('/topics/{topic_id}', params, ['include']));\n\n/**\n * 获取指定话题下的文章\n * 获取指定话题下的文章。\n */\nexport const getArticles = (\n  params: GetArticlesParams,\n): Promise<ArticlesResponse> =>\n  getRequest(\n    buildURL('/topics/{topic_id}/articles', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定话题的关注者\n * 不含已禁用的用户。\n */\nexport const getFollowers = (\n  params: GetFollowersParams,\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/topics/{topic_id}/followers', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取全部话题\n * 获取全部话题。\n */\nexport const getList = (params: GetListParams = {}): Promise<TopicsResponse> =>\n  getRequest(\n    buildURL('/topics', params, [\n      'page',\n      'per_page',\n      'include',\n      'order',\n      'topic_id',\n      'name',\n      'trashed',\n    ]),\n  );\n\n/**\n * 获取指定话题下的提问\n * 获取指定话题下的提问。\n */\nexport const getQuestions = (\n  params: GetQuestionsParams,\n): Promise<QuestionsResponse> =>\n  getRequest(\n    buildURL('/topics/{topic_id}/questions', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 🔐把话题放入回收站\n * 把话题放入回收站。\n */\nexport const trash = (params: TrashParams): Promise<TopicResponse> =>\n  postRequest(buildURL('/topics/{topic_id}/trash', params, ['include']));\n\n/**\n * 🔐批量把话题放入回收站\n * 批量把话题放入回收站。\n */\nexport const trashMultiple = (\n  params: TrashMultipleParams,\n): Promise<TopicsResponse> =>\n  postRequest(buildURL('/topics/{topic_ids}/trash', params, ['include']));\n\n/**\n * 🔐把话题移出回收站\n * 把话题移出回收站。\n */\nexport const untrash = (params: UntrashParams): Promise<TopicResponse> =>\n  postRequest(buildURL('/topics/{topic_id}/untrash', params, ['include']));\n\n/**\n * 🔐批量把话题移出回收站\n * 批量把话题移出回收站。\n */\nexport const untrashMultiple = (\n  params: UntrashMultipleParams,\n): Promise<TopicsResponse> =>\n  postRequest(buildURL('/topics/{topic_ids}/untrash', params, ['include']));\n\n/**\n * 🔐更新话题信息\n * 更新话题信息。  因为 formData 类型的数据只能通过 post 请求提交，所以这里不用 patch 请求\n */\nexport const update = (params: UpdateParams): Promise<TopicResponse> => {\n  const formData = new FormData();\n  formData.append('topic_id', params.topic_id.toString());\n  params.name && formData.append('name', params.name);\n  params.description && formData.append('description', params.description);\n  params.cover && formData.append('cover', params.cover);\n\n  return postRequest(\n    buildURL('/topics/{topic_id}', params, ['include']),\n    formData,\n  );\n};\n","// @ts-ignore\nimport sha1 from 'sha-1';\nimport {\n  getRequest,\n  postRequest,\n  putRequest,\n  patchRequest,\n  deleteRequest,\n} from './util/requestAlias';\nimport { buildURL, buildRequestBody } from './util/requestHandler';\nimport {\n  UserAvatarResponse,\n  UsersResponse,\n  AnswersResponse,\n  ArticlesResponse,\n  UserCoverResponse,\n  CommentsResponse,\n  UserResponse,\n  QuestionsResponse,\n  TopicsResponse,\n  FollowerCountResponse,\n  EmptyResponse,\n} from './models';\n\ninterface AddFollowParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n}\n\ninterface DeleteAvatarParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n}\n\ninterface DeleteCoverParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n}\n\ninterface DeleteFollowParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n}\n\ninterface DisableParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface DisableMultipleParams {\n  /**\n   * 多个用 `,` 分隔的用户ID，最多可提供 100 个 ID\n   */\n  user_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface EnableParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface EnableMultipleParams {\n  /**\n   * 多个用 `,` 分隔的用户ID，最多可提供 100 个 ID\n   */\n  user_ids: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetAnswersParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface GetArticlesParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetCommentsParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetFolloweesParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetFollowersParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetFollowingArticlesParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetFollowingQuestionsParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetFollowingTopicsParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface GetListParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `create_time`、`disable_time`、`follower_count`。默认为 `-create_time`。其中 `disable_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'create_time'\n    | 'disable_time'\n    | 'follower_count'\n    | '-create_time'\n    | '-disable_time'\n    | '-follower_count';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n  /**\n   * 用户ID\n   */\n  user_id?: number;\n  /**\n   * 用户名\n   */\n  username?: string;\n  /**\n   * 🔐邮箱\n   */\n  email?: string;\n  /**\n   * 🔐是否仅获取已禁用的用户\n   */\n  disabled?: boolean;\n}\n\ninterface GetMineParams {\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetMyAnswersParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `question`, `voting`\n   */\n  include?: Array<'user' | 'question' | 'voting'>;\n}\n\ninterface GetMyArticlesParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetMyCommentsParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `voting`\n   */\n  include?: Array<'user' | 'voting'>;\n}\n\ninterface GetMyFolloweesParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetMyFollowersParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface GetMyFollowingArticlesParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetMyFollowingQuestionsParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetMyFollowingTopicsParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_following`\n   */\n  include?: Array<'is_following'>;\n}\n\ninterface GetMyQuestionsParams {\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface GetQuestionsParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 当前页数\n   */\n  page?: number;\n  /**\n   * 每页条数（最大为 100）\n   */\n  per_page?: number;\n  /**\n   * 排序方式。在字段前加 `-` 表示倒序排列。  可排序字段包括 `vote_count`、`create_time`、`update_time`、`delete_time`。默认为 `-create_time`。其中 `delete_time` 值仅管理员使用有效。\n   */\n  order?:\n    | 'vote_count'\n    | 'create_time'\n    | 'update_time'\n    | 'delete_time'\n    | '-vote_count'\n    | '-create_time'\n    | '-update_time'\n    | '-delete_time';\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `user`, `topics`, `is_following`, `voting`\n   */\n  include?: Array<'user' | 'topics' | 'is_following' | 'voting'>;\n}\n\ninterface RegisterParams {\n  /**\n   * 邮箱\n   */\n  email: string;\n  /**\n   * 邮箱验证码\n   */\n  email_code: string;\n  /**\n   * 用户名\n   */\n  username: string;\n  /**\n   * hash1 加密后的密码\n   */\n  password: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface SendPasswordResetEmailParams {\n  /**\n   * 邮箱\n   */\n  email: string;\n  /**\n   * 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数\n   */\n  captcha_token?: string;\n  /**\n   * 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数\n   */\n  captcha_code?: string;\n}\n\ninterface SendRegisterEmailParams {\n  /**\n   * 邮箱\n   */\n  email: string;\n  /**\n   * 图形验证码token。若上一次请求返回了 captcha_token， 则必须传该参数\n   */\n  captcha_token?: string;\n  /**\n   * 图形验证码的值。若上一次请求返回了 captcha_token，则必须传该参数\n   */\n  captcha_code?: string;\n}\n\ninterface UpdateParams {\n  /**\n   * 用户ID\n   */\n  user_id: number;\n  /**\n   * 一句话介绍\n   */\n  headline?: string;\n  /**\n   * 个人简介\n   */\n  bio?: string;\n  /**\n   * 个人主页\n   */\n  blog?: string;\n  /**\n   * 所属企业\n   */\n  company?: string;\n  /**\n   * 所属地区\n   */\n  location?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface UpdateMineParams {\n  /**\n   * 一句话介绍\n   */\n  headline?: string;\n  /**\n   * 个人简介\n   */\n  bio?: string;\n  /**\n   * 个人主页\n   */\n  blog?: string;\n  /**\n   * 所属企业\n   */\n  company?: string;\n  /**\n   * 所属地区\n   */\n  location?: string;\n  /**\n   * 响应中需要包含的关联数据，用“,”分隔。可以为 `is_followed`, `is_following`, `is_me`\n   */\n  include?: Array<'is_followed' | 'is_following' | 'is_me'>;\n}\n\ninterface UpdatePasswordParams {\n  /**\n   * 邮箱\n   */\n  email: string;\n  /**\n   * 邮箱验证码\n   */\n  email_code: string;\n  /**\n   * hash1 加密后的密码\n   */\n  password: string;\n}\n\ninterface UploadMyAvatarParams {\n  /**\n   * 用户头像\n   */\n  avatar: File;\n}\n\ninterface UploadMyCoverParams {\n  /**\n   * 用户封面\n   */\n  cover: File;\n}\n\n/**\n * 🔑添加关注\n * 添加关注。\n */\nexport const addFollow = (\n  params: AddFollowParams,\n): Promise<FollowerCountResponse> =>\n  postRequest(buildURL('/users/{user_id}/followers', params));\n\n/**\n * 🔐删除指定用户的头像，并重置为默认头像\n * 删除指定用户的头像，并重置为默认头像。\n */\nexport const deleteAvatar = (\n  params: DeleteAvatarParams,\n): Promise<UserAvatarResponse> =>\n  deleteRequest(buildURL('/users/{user_id}/avatar', params));\n\n/**\n * 🔐删除指定用户的封面，并重置为默认封面\n * 删除指定用户的封面，并重置为默认封面。\n */\nexport const deleteCover = (\n  params: DeleteCoverParams,\n): Promise<UserCoverResponse> =>\n  deleteRequest(buildURL('/users/{user_id}/cover', params));\n\n/**\n * 🔑取消关注\n * 取消关注。\n */\nexport const deleteFollow = (\n  params: DeleteFollowParams,\n): Promise<FollowerCountResponse> =>\n  deleteRequest(buildURL('/users/{user_id}/followers', params));\n\n/**\n * 🔑删除当前登录用户的头像，并重置为默认头像\n * 删除当前登录用户的头像，并重置为默认头像。\n */\nexport const deleteMyAvatar = (): Promise<UserAvatarResponse> =>\n  deleteRequest(buildURL('/user/avatar', {}));\n\n/**\n * 🔑删除当前登录用户的封面，并重置为默认封面\n * 删除当前登录用户的封面，并重置为默认封面。\n */\nexport const deleteMyCover = (): Promise<UserCoverResponse> =>\n  deleteRequest(buildURL('/user/cover', {}));\n\n/**\n * 🔐禁用指定用户\n * 禁用指定用户。\n */\nexport const disable = (params: DisableParams): Promise<UserResponse> =>\n  postRequest(buildURL('/users/{user_id}/disable', params, ['include']));\n\n/**\n * 🔐批量禁用用户\n * 批量禁用用户。\n */\nexport const disableMultiple = (\n  params: DisableMultipleParams,\n): Promise<UsersResponse> =>\n  postRequest(buildURL('/users/{user_ids}/disable', params, ['include']));\n\n/**\n * 🔐恢复指定用户\n * 恢复指定用户。\n */\nexport const enable = (params: EnableParams): Promise<UserResponse> =>\n  postRequest(buildURL('/users/{user_id}/enable', params, ['include']));\n\n/**\n * 🔐批量恢复用户\n * 批量恢复用户。\n */\nexport const enableMultiple = (\n  params: EnableMultipleParams,\n): Promise<UsersResponse> =>\n  postRequest(buildURL('/users/{user_ids}/enable', params, ['include']));\n\n/**\n * 获取指定用户信息\n * 若是管理员调用该接口、或当前登录用户读取自己的个人信息，将返回用户的所有信息。  其他情况仅返回部分字段（去掉了隐私信息，隐私字段已用 🔐 标明）\n */\nexport const get = (params: GetParams): Promise<UserResponse> =>\n  getRequest(buildURL('/users/{user_id}', params, ['include']));\n\n/**\n * 获取指定用户发表的回答\n * 获取指定用户发表的回答。\n */\nexport const getAnswers = (\n  params: GetAnswersParams,\n): Promise<AnswersResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/answers', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户发表的文章\n * 获取指定用户发表的文章。\n */\nexport const getArticles = (\n  params: GetArticlesParams,\n): Promise<ArticlesResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/articles', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户发表的评论\n * 获取指定用户发表的评论。\n */\nexport const getComments = (\n  params: GetCommentsParams,\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/comments', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户关注的用户列表\n * 获取指定用户关注的用户列表。\n */\nexport const getFollowees = (\n  params: GetFolloweesParams,\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/followees', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户的关注者\n * 获取指定用户的关注者。\n */\nexport const getFollowers = (\n  params: GetFollowersParams,\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/followers', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户关注的文章列表\n * 获取指定用户关注的文章列表。\n */\nexport const getFollowingArticles = (\n  params: GetFollowingArticlesParams,\n): Promise<ArticlesResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/following_articles', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户关注的提问列表\n * 获取指定用户关注的提问列表。\n */\nexport const getFollowingQuestions = (\n  params: GetFollowingQuestionsParams,\n): Promise<QuestionsResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/following_questions', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户关注的话题列表\n * 获取指定用户关注的话题列表。\n */\nexport const getFollowingTopics = (\n  params: GetFollowingTopicsParams,\n): Promise<TopicsResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/following_topics', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 获取用户列表\n * 仅管理员可使用 email 参数进行搜索。  仅管理员可获取已禁用的用户列表。\n */\nexport const getList = (params: GetListParams = {}): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/users', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n      'user_id',\n      'username',\n      'email',\n      'disabled',\n    ]),\n  );\n\n/**\n * 🔑获取当前登录用户的信息\n * 获取当前登录用户的信息。\n */\nexport const getMine = (params: GetMineParams = {}): Promise<UserResponse> =>\n  getRequest(buildURL('/user', params, ['include']));\n\n/**\n * 🔑获取当前登录用户发表的回答\n * 获取当前登录用户发表的回答。\n */\nexport const getMyAnswers = (\n  params: GetMyAnswersParams = {},\n): Promise<AnswersResponse> =>\n  getRequest(\n    buildURL('/user/answers', params, ['page', 'per_page', 'order', 'include']),\n  );\n\n/**\n * 🔑获取当前登录用户发表的文章\n * 获取当前登录用户发表的文章。\n */\nexport const getMyArticles = (\n  params: GetMyArticlesParams = {},\n): Promise<ArticlesResponse> =>\n  getRequest(\n    buildURL('/user/articles', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 🔑获取当前登录用户发表的评论\n * 获取当前登录用户发表的评论。\n */\nexport const getMyComments = (\n  params: GetMyCommentsParams = {},\n): Promise<CommentsResponse> =>\n  getRequest(\n    buildURL('/user/comments', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 🔑获取当前登录用户关注的用户\n * 获取当前登录用户关注的用户。\n */\nexport const getMyFollowees = (\n  params: GetMyFolloweesParams = {},\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/user/followees', params, ['page', 'per_page', 'include']),\n  );\n\n/**\n * 🔑获取当前登录用户的关注者\n * 获取当前登录用户的关注者。\n */\nexport const getMyFollowers = (\n  params: GetMyFollowersParams = {},\n): Promise<UsersResponse> =>\n  getRequest(\n    buildURL('/user/followers', params, ['page', 'per_page', 'include']),\n  );\n\n/**\n * 🔑获取登录用户关注的文章\n * 获取登录用户关注的文章。\n */\nexport const getMyFollowingArticles = (\n  params: GetMyFollowingArticlesParams = {},\n): Promise<ArticlesResponse> =>\n  getRequest(\n    buildURL('/user/following_articles', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 🔑获取登录用户关注的提问\n * 获取登录用户关注的提问。\n */\nexport const getMyFollowingQuestions = (\n  params: GetMyFollowingQuestionsParams = {},\n): Promise<QuestionsResponse> =>\n  getRequest(\n    buildURL('/user/following_questions', params, [\n      'page',\n      'per_page',\n      'include',\n    ]),\n  );\n\n/**\n * 🔑获取登录用户关注的话题\n * 获取登录用户关注的话题。\n */\nexport const getMyFollowingTopics = (\n  params: GetMyFollowingTopicsParams = {},\n): Promise<TopicsResponse> =>\n  getRequest(\n    buildURL('/user/following_topics', params, ['page', 'per_page', 'include']),\n  );\n\n/**\n * 🔑获取登录用户发表的提问\n * 获取登录用户发表的提问。\n */\nexport const getMyQuestions = (\n  params: GetMyQuestionsParams = {},\n): Promise<QuestionsResponse> =>\n  getRequest(\n    buildURL('/user/questions', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 获取指定用户发表的提问\n * 获取指定用户发表的提问。\n */\nexport const getQuestions = (\n  params: GetQuestionsParams,\n): Promise<QuestionsResponse> =>\n  getRequest(\n    buildURL('/users/{user_id}/questions', params, [\n      'page',\n      'per_page',\n      'order',\n      'include',\n    ]),\n  );\n\n/**\n * 验证邮箱并创建账号\n * 返回用户信息。\n */\nexport const register = (params: RegisterParams): Promise<UserResponse> => {\n  if (params.password) {\n    params.password = sha1(params.password);\n  }\n\n  return postRequest(\n    buildURL('/users', params, ['include']),\n    buildRequestBody(params, ['email', 'email_code', 'username', 'password']),\n  );\n};\n\n/**\n * 发送重置密码邮箱验证码\n * 若返回参数中含参数 &#x60;captcha_token&#x60; 和 &#x60;captcha_image&#x60;，表示下次调用该接口时，需要用户输入图形验证码， 并把 &#x60;captcha_token&#x60; 和 &#x60;captcha_code&#x60; 参数传递到服务端。\n */\nexport const sendPasswordResetEmail = (\n  params: SendPasswordResetEmailParams,\n): Promise<EmptyResponse> =>\n  postRequest(\n    buildURL('/user/password/email', params),\n    buildRequestBody(params, ['email', 'captcha_token', 'captcha_code']),\n  );\n\n/**\n * 发送注册邮箱验证码\n * 若返回信息中含参数 &#x60;captcha_token&#x60; 和 &#x60;captcha_image&#x60;，表示下次调用该接口时，需要用户输入图形验证码， 并把 &#x60;captcha_token&#x60; 和 &#x60;captcha_code&#x60; 参数传递到服务端。\n */\nexport const sendRegisterEmail = (\n  params: SendRegisterEmailParams,\n): Promise<EmptyResponse> =>\n  postRequest(\n    buildURL('/user/register/email', params),\n    buildRequestBody(params, ['email', 'captcha_token', 'captcha_code']),\n  );\n\n/**\n * 🔐更新指定用户信息\n * 更新指定用户信息。\n */\nexport const update = (params: UpdateParams): Promise<UserResponse> =>\n  patchRequest(\n    buildURL('/users/{user_id}', params, ['include']),\n    buildRequestBody(params, [\n      'headline',\n      'bio',\n      'blog',\n      'company',\n      'location',\n    ]),\n  );\n\n/**\n * 🔑更新当前登录用户信息\n * 更新当前登录用户信息。\n */\nexport const updateMine = (params: UpdateMineParams): Promise<UserResponse> =>\n  patchRequest(\n    buildURL('/user', params, ['include']),\n    buildRequestBody(params, [\n      'headline',\n      'bio',\n      'blog',\n      'company',\n      'location',\n    ]),\n  );\n\n/**\n * 验证邮箱并更新密码\n * 验证邮箱并更新密码。\n */\nexport const updatePassword = (\n  params: UpdatePasswordParams,\n): Promise<EmptyResponse> => {\n  if (params.password) {\n    params.password = sha1(params.password);\n  }\n\n  return putRequest(\n    buildURL('/user/password', params),\n    buildRequestBody(params, ['email', 'email_code', 'password']),\n  );\n};\n\n/**\n * 🔑上传当前登录用户的头像\n * 上传当前登录用户的头像。\n */\nexport const uploadMyAvatar = (\n  params: UploadMyAvatarParams,\n): Promise<UserAvatarResponse> => {\n  const formData = new FormData();\n  formData.append('avatar', params.avatar);\n\n  return postRequest(buildURL('/user/avatar'), formData);\n};\n\n/**\n * 🔑上传当前登录用户的封面\n * 上传当前登录用户的封面。\n */\nexport const uploadMyCover = (\n  params: UploadMyCoverParams,\n): Promise<UserCoverResponse> => {\n  const formData = new FormData();\n  formData.append('cover', params.cover);\n\n  return postRequest(buildURL('/user/cover'), formData);\n};\n"],"names":["e","Promise","promiseFinally","const","let","i","this","globalOptions","BrowserAbstract","BrowserAdapter","del","addVote","createComment","deleteMultiple","deleteVote","get","getComments","getList","getVoters","trash","trashMultiple","untrash","untrashMultiple","update","addFollow","create","deleteFollow","getFollowers","getAnswers","getArticles","getQuestions"],"mappings":"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"}